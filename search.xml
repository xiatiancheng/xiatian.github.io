<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日常记录</title>
      <link href="/xiatian.github.io/2022/02/26/ji-lu-yi-xia-zi/"/>
      <url>/xiatian.github.io/2022/02/26/ji-lu-yi-xia-zi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>nginx -t  查找nginx，的安装目录<br>ps  -ef | grep nginx  确定nginx的启动文件<br>nginx -s reload 重启</p></blockquote><ul><li>输入rz命令，看是否已经安装了lrzsz，如果没有安装则执行  yum   -y  install  lrzsz命令进行安装</li><li>yum install zip  </li><li>yum install unzip <blockquote><p>sudo unzip dist.zip  解压文件<br>tar -zxvf jdk-17_linux-x64_bin.tar.gz</p></blockquote></li></ul><blockquote><p>sudu rz 上传文件<br>ll  显示所有文件</p></blockquote><blockquote><p>sudo rm -rf * 不用多说了吧 删除</p></blockquote><p><img src="https://s4.ax1x.com/2022/02/26/bV2BH1.gif" alt="删库跑路"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端, 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/xiatian.github.io/2022/02/12/python/"/>
      <url>/xiatian.github.io/2022/02/12/python/</url>
      
        <content type="html"><![CDATA[<h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><blockquote><p><a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a> 下载最新的Python安装包</p></blockquote><blockquote><p>记得勾选环境变量<br><img src="https://s4.ax1x.com/2022/02/12/HwUzjO.png" alt="安装.png"></p></blockquote><h2 id="2-测试Python是否安装成功"><a href="#2-测试Python是否安装成功" class="headerlink" title="2.  测试Python是否安装成功"></a>2.  测试Python是否安装成功</h2><blockquote><p>python  -V</p></blockquote><h2 id="3-安装PyCharm"><a href="#3-安装PyCharm" class="headerlink" title="3. 安装PyCharm"></a>3. 安装PyCharm</h2><blockquote><p>安装个汉化插件，然后新建个py项目,在main.py 开始</p></blockquote><h2 id="4-开干"><a href="#4-开干" class="headerlink" title="4. 开干"></a>4. 开干</h2><blockquote><p>事情是这么个事情，需要一个excel包括所有烟的名称，类型，粗细，单价，条价，卖点口味，最好再带每一个烟的图片，我这一想这种类有点多啊！那就开干python来爬数据<br><a href="http://www.cnxiangyan.com/jiage/list_1.html">http://www.cnxiangyan.com/jiage/list_1.html</a></p></blockquote><h2 id="5-写了一天，终于跑出来了"><a href="#5-写了一天，终于跑出来了" class="headerlink" title="5.  写了一天，终于跑出来了"></a>5.  写了一天，终于跑出来了</h2><pre class="line-numbers language-pythone" data-language="pythone"><code class="language-pythone">import requestsfrom bs4 import BeautifulSoup  # 将复杂HTML文档转换成一个复杂的树形结构import time  # 时间相关import os  # 操作系统标准库osimport re  # 正则相关依赖import xlsxwriter  # excel相关依赖import sysimport ioimport urllib.request  # 接受URL请求的相关模块from PIL import Image# 有些网站需要头信息来进行请求headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',           'Host': 'www.cnxiangyan.com',           'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.5 Safari/605.1.15'}# 获取列表页面的数据def fire():    for i in range(1, 114):        print("开始爬取第 {} 页".format(i))        # 涉及到分页 共 113 页 1466 条        # http://www.cnxiangyan.com/brand/list_1.html        # http://www.cnxiangyan.com/brand/list_2.html        # http://www.cnxiangyan.com/brand/list_3.html        # 分页规律 1,2,3 这样 {}        url = 'http://www.cnxiangyan.com/brand/list_{}.html'.format(i)        res = requests.get(url, headers=headers).text        data = get_poster_url(res, i)  # 获取详细信息        # download_picture(data) #下载图片        time.sleep(5)  # 分页循环# 获取详细信息def get_poster_url(res, i):    content = BeautifulSoup(res, "html.parser")  # 拿到整个网页 html    data = content.find_all('ul')[0].find_all('li')    cursor = 0    picture_list = []    if i &gt; 1:  # 判断        cursor = 13 * (i - 1)    for d in data:        cursor += 1        # .strip() 去除字符串首尾的空格        #  replace('\n', '').replace('\r', '') 去除回车符\r 和 换行符\n        # 焦油量        taste = d.find_all('span', attrs={'class': 'show_nx'})[1].text.replace('\n', '').replace('\r', '').strip()        # 名字        name = d.find('a').text.replace('\n', '').replace('\r', '').strip()        # 类型        types = d.find_all('span', attrs={'class': 'show_nx'})[0].text.replace('\n', '').replace('\r', '').strip()        # 单价        price = d.find_all('span', attrs={'class': 'show_jg'})[0].text        # 条价        total = d.find_all('span', attrs={'class': 'show_jg'})[1].text        plist = d.find('img')['src']        writeExcel(row=cursor, pic=plist, name=name, types=types, price=price, taste=taste,                   total=total)        # print(picture_list)    return picture_listdef download_picture(pic_l):    if not os.path.exists(r'picture'):        os.mkdir(r'picture')    for i in pic_l:        # 爬出来的图片格式是//img1.cnxiangyan.com/2022/0106/61d69bd1eafc6.png?x-image-process=style/sy，需要拼接上http        urls = "http:{}".format(i['plist'])        # 我需要把？后参数去掉 分割字符串        pattern = r'[?]'  # 定义分隔符        result = re.split(pattern, urls)  # 以pattern的值 分割字符串        # 取到数组 ['http://img1.cnxiangyan.com/2022/0106/61d69bd1eafc6.png','x-image-process=style/sy']        pic = requests.get(result[0])        # 这样保存文件需要个名字 ['http:', '', 'img1.cnxiangyan.com', '2022', '0106', '61d69bd1eafc6.png']        # 这个就是创建 picture 文件夹 保存下来 我的图片文件        # p_name = result[0].split('/')[5]        # with open('picture\\' + p_name, 'wb') as f:        #     f.write(pic.content)# 将数据写入工作表中def writeExcel(row=0, pic='', name='', types='', price='', taste='', total=''):    format1 = {        'align': 'center',  # 水平位置设置：居中        'valign': 'vcenter',  # 垂直位置设置，居中    }    str_format = workbook.add_format(format1)    if row == 0:        worksheet.set_column('A:A', 30)  # 设置A列宽度30        worksheet.set_column('B:B', 20)        worksheet.set_column('C:C', 20)        worksheet.set_column('D:D', 20)        worksheet.set_column('E:E', 20)        worksheet.set_column('F:F', 20)        worksheet.write(row, 0, '图片', str_format)        worksheet.write(row, 1, '名称', str_format)        worksheet.write(row, 2, '类型', str_format)        worksheet.write(row, 3, '焦油量', str_format)        worksheet.write(row, 4, '单价', str_format)        worksheet.write(row, 5, '条价', str_format)    else:        fixed_size = 100        worksheet.set_row(row, 100)  # 设置行高100        if pic != "":            url = 'https://cnxiangyan-upload.xiazai63.com{}'.format(pic)            image_data = io.BytesIO(urllib.request.urlopen(url).read())            img = Image.open(image_data)            if img.size[1] &gt; fixed_size:                x = float(fixed_size / img.size[1])            else:                x = 1            worksheet.insert_image('A{}'.format(row + 1), url, {'image_data': image_data, 'x_scale': x, 'y_scale': x})        worksheet.write(row, 1, name, str_format)        worksheet.write(row, 2, types, str_format)        worksheet.write(row, 3, taste, str_format)        worksheet.write(row, 4, price, str_format)        worksheet.write(row, 5, total, str_format)if __name__ == '__main__': job_city_school = sys.argv[1:]  # 接受程序外部传入的参数try:    # 创建一个excel表格    workbook = xlsxwriter.Workbook('tian.xlsx')    # 为创建的excel表格添加一个工作表    worksheet = workbook.add_worksheet()    writeExcel(row=0)  # 先创建一个头部行    fire()    workbook.close()    print('所有条目写入完成..')except ValueError:    print('输入文本有误 ') <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-纪念一下成果-哈哈哈哈哈"><a href="#6-纪念一下成果-哈哈哈哈哈" class="headerlink" title="6. 纪念一下成果 哈哈哈哈哈"></a>6. 纪念一下成果 哈哈哈哈哈</h2><p><img src="https://s4.ax1x.com/2022/02/12/H0z31e.png" alt="pythone.png"></p><p><img src="https://s4.ax1x.com/2022/02/12/H0zB9S.png" alt="excel.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3写法整理</title>
      <link href="/xiatian.github.io/2022/02/10/vue3-xie-fa/"/>
      <url>/xiatian.github.io/2022/02/10/vue3-xie-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基础写法"><a href="#1-基础写法" class="headerlink" title="1.基础写法"></a>1.基础写法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        哎，当前用户：<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>state<span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>loginName<span class="token punctuation">}</span><span class="token punctuation">}</span>        年龄<span class="token operator">:</span>         <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>doubleAge<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>a<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">'changeName'</span> danger<span class="token operator">&gt;</span>我是让他变傻的按钮<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">-</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span> setup<span class="token operator">&gt;</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> toRefs<span class="token punctuation">,</span> computed<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>    <span class="token comment">// 1.ref声明响应式数据，用于声明基本数据类型</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'Tom'</span>    <span class="token comment">// 2.reactive声明响应式数据，用于声明引用数据类型</span>    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'夏天1111'</span><span class="token punctuation">,</span>        sex<span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'夏天2222'</span>    <span class="token comment">// 3.使用toRefs解构 这里重命名name</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> loginName<span class="token punctuation">,</span> sex<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token comment">// template可直接使用{{loginName}}、{{sex}}</span>    <span class="token comment">// 4.声明method方法</span>    <span class="token keyword">const</span> <span class="token function-variable function">changeName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'夏天傻'</span>    <span class="token punctuation">}</span>    <span class="token comment">// 5.通过计算属性computed获得</span>    <span class="token keyword">const</span> doubleAge <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> age<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubleAge<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 40</span>    <span class="token comment">// doubleAge.value++ // 报错只读属性</span>    <span class="token comment">//带有 get 和 set 函数的对象来创建一个可写的 ref 对象</span>    <span class="token comment">//默认情况下我们只是使用了computer中的gettter属性，只有 getter</span>    <span class="token comment">//只有当computed监测的值变化的时候，也就是我下面例子中的fullName变化的时候，set才回被调用</span>    <span class="token keyword">const</span> doubleAge2 <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> age<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            age<span class="token punctuation">.</span>value <span class="token operator">=</span> val <span class="token operator">/</span> <span class="token number">2</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    doubleAge2<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">20</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 10</span>  <span class="token comment">// 6.监听</span>  <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>age<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">watch监听变化前的数据：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>oldVal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">watch监听变化后的数据：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newVal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 立即执行</span>      deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 深度监听</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-props父传子"><a href="#2-props父传子" class="headerlink" title="2.props父传子"></a>2.props父传子</h2><ol><li>父组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>child name<span class="token operator">=</span><span class="token string">'xiatian'</span><span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token comment">// 引入子组件(组件自动注册)</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./child.vue'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>子组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>  <span class="token comment">// 可省略【props.】</span>  <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token comment">// defineProps在&lt;script setup&gt;中自动可用，无需导入</span>  <span class="token comment">// 声明props</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token punctuation">{</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-emit子传父"><a href="#3-emit子传父" class="headerlink" title="3.emit子传父"></a>3.emit子传父</h2><ol><li>父组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>child <span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">'state.name'</span> @updateName<span class="token operator">=</span><span class="token string">'updateName'</span><span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token comment">// 引入子组件</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./child.vue'</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'xiatian'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 接收子组件触发的方法</span>  <span class="token keyword">const</span> <span class="token function-variable function">updateName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>子组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>  <span class="token comment">// 可省略【props.】</span>  <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">'changeName'</span><span class="token operator">&gt;</span>更名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token comment">// 声明props</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token punctuation">{</span>      type<span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// 声明事件</span>  <span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'updateName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">changeName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 执行</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'updateName'</span><span class="token punctuation">,</span> <span class="token string">'夏天222'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="4-v-model"><a href="#4-v-model" class="headerlink" title="4. v-model"></a>4. v-model</h2><ol><li>父组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token comment">//  v-model:modelValue简写为v-model </span>  <span class="token comment">//  可绑定多个v-model</span>  <span class="token operator">&lt;</span>child    v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"state.name"</span>    v<span class="token operator">-</span>model<span class="token operator">:</span>age<span class="token operator">=</span><span class="token string">"state.age"</span>  <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token comment">// 引入子组件</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./child.vue'</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'Jerry'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">20</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>子组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>span @click<span class="token operator">=</span><span class="token string">"changeInfo"</span><span class="token operator">&gt;</span>我叫<span class="token punctuation">{</span><span class="token punctuation">{</span> modelValue <span class="token punctuation">}</span><span class="token punctuation">}</span>，今年<span class="token punctuation">{</span><span class="token punctuation">{</span> age <span class="token punctuation">}</span><span class="token punctuation">}</span>岁<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    modelValue<span class="token operator">:</span> String<span class="token punctuation">,</span>    age<span class="token operator">:</span> Number  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'update:modelValue'</span><span class="token punctuation">,</span> <span class="token string">'update:age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token function-variable function">changeInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 触发父组件值更新</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:modelValue'</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">)</span>    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:age'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="5-nextTick"><a href="#5-nextTick" class="headerlink" title="5. nextTick"></a>5. nextTick</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> nextTick <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-子组件ref变量和defineExpose"><a href="#6-子组件ref变量和defineExpose" class="headerlink" title="6.子组件ref变量和defineExpose"></a>6.子组件ref变量和defineExpose</h2><blockquote><p>如果要调用子组件的数据，需要先在子组件显示的暴露出来，就是由 defineExpose 来完成。</p></blockquote><ol><li>父组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>child ref<span class="token operator">=</span><span class="token string">'childRef'</span><span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> nextTick <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token comment">// 引入子组件</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./child.vue'</span>  <span class="token comment">// 子组件ref</span>  <span class="token keyword">const</span> childRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// nextTick</span>  <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取子组件name</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>childRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment">// 执行子组件方法</span>    childRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token number">2.</span> 子组件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token comment">// 声明state</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'xiatian'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// 将方法、变量暴露给父组件使用，父组件才可通过ref API拿到子组件暴露的数据</span>  <span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 解构state</span>    <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// 声明方法</span>    <span class="token function">changeName</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="7-插槽slot"><a href="#7-插槽slot" class="headerlink" title="7. 插槽slot"></a>7. 插槽slot</h2><ol><li>父组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>child<span class="token operator">&gt;</span>    <span class="token comment">// 匿名插槽</span>    <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>我是默认插槽<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token comment">// 具名插槽 </span>    <span class="token operator">&lt;</span>template #title<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>我是具名插槽<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>我是具名插槽<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>我是具名插槽<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>    <span class="token comment">//  作用域插槽</span>    <span class="token operator">&lt;</span>template #footer<span class="token operator">=</span><span class="token string">"{ scope }"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span>作用域插槽——姓名：<span class="token punctuation">{</span><span class="token punctuation">{</span> scope<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span>，年龄<span class="token punctuation">{</span><span class="token punctuation">{</span> scope<span class="token punctuation">.</span>age <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token comment">// 引入子组件</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./child.vue'</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>子组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token comment">//  匿名插槽 </span>  <span class="token operator">&lt;</span>slot<span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token comment">//  具名插槽 </span>  <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">'title'</span><span class="token operator">/</span><span class="token operator">&gt;</span>  <span class="token comment">//  作用域插槽 </span>  <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span> <span class="token operator">:</span>scope<span class="token operator">=</span><span class="token string">"state"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> useSlots<span class="token punctuation">,</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token string">'25岁'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="8-路由useRoute和useRouter"><a href="#8-路由useRoute和useRouter" class="headerlink" title="8. 路由useRoute和useRouter"></a>8. 路由useRoute和useRouter</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> useRoute<span class="token punctuation">,</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>  <span class="token comment">// 必须先声明调用</span>  <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 路由信息</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>query<span class="token punctuation">)</span>  <span class="token comment">// 路由跳转</span>  router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/newPage'</span><span class="token punctuation">)</span>  router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token operator">:</span><span class="token string">"/newPage"</span><span class="token punctuation">,</span>query<span class="token operator">:</span><span class="token punctuation">{</span>id<span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-路由导航守卫"><a href="#9-路由导航守卫" class="headerlink" title="9. 路由导航守卫"></a>9. 路由导航守卫</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> onBeforeRouteLeave<span class="token punctuation">,</span> onBeforeRouteUpdate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span>  <span class="token comment">// 添加一个导航守卫，在当前组件将要离开时触发。</span>  <span class="token function">onBeforeRouteLeave</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 添加一个导航守卫，在当前组件更新时触发。</span>  <span class="token comment">// 在当前路由改变，但是该组件被复用时调用。</span>  <span class="token function">onBeforeRouteUpdate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-生命周期"><a href="#10-生命周期" class="headerlink" title="10. 生命周期"></a>10. 生命周期</h2><table><thead><tr><th align="center">Option API</th><th align="center">setup中</th></tr></thead><tbody><tr><td align="center">beforeCreate</td><td align="center">不需要</td></tr><tr><td align="center">created</td><td align="center">不需要</td></tr><tr><td align="center">beforeMount</td><td align="center">onBeforeMount</td></tr><tr><td align="center">mounted</td><td align="center">onMounted</td></tr><tr><td align="center">beforeUpdate</td><td align="center">onBeforeUpdate</td></tr><tr><td align="center">updated</td><td align="center">onUpdated</td></tr><tr><td align="center">beforeUnmount</td><td align="center">onBeforeUnmount</td></tr><tr><td align="center">unmounted</td><td align="center">onUnmounted</td></tr><tr><td align="center">errorCaptured</td><td align="center">onErrorCaptured</td></tr><tr><td align="center">renderTracked</td><td align="center">onRenderTracked</td></tr><tr><td align="center">renderTriggered</td><td align="center">onRenderTriggered</td></tr><tr><td align="center">activated</td><td align="center">onActivated</td></tr><tr><td align="center">deactivated</td><td align="center">onDeactivated</td></tr></tbody></table><h2 id="11-CSS变量注入"><a href="#11-CSS变量注入" class="headerlink" title="11. CSS变量注入"></a>11. CSS变量注入</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>xiatian<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    color<span class="token operator">:</span> <span class="token string">'red'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>style scoped<span class="token operator">&gt;</span>  span <span class="token punctuation">{</span>    <span class="token comment">// 使用v-bind绑定state中的变量</span>    color<span class="token operator">:</span> v<span class="token operator">-</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'state.color'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-对-await-的支持"><a href="#12-对-await-的支持" class="headerlink" title="12. 对 await 的支持"></a>12. 对 await 的支持</h2><blockquote><p>不必再配合 async 就可以直接使用 await 了，这种情况下，组件的 setup 会自动变成 async setup 。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>    <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="13-provide和inject"><a href="#13-provide和inject" class="headerlink" title="13. provide和inject"></a>13. provide和inject</h2><ol><li>父组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>child<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>  <span class="token comment">// 引入子组件</span>  <span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">'./child.vue'</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'夏天'</span><span class="token punctuation">)</span>  <span class="token comment">// 声明provide</span>  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'provideState'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    name<span class="token punctuation">,</span>    <span class="token function-variable function">changeName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'夏天111'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// 监听name改变</span>  <span class="token function">watch</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name变成了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// 夏天111</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>子组件<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">// 注入</span>  <span class="token keyword">const</span> provideState <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'provideState'</span><span class="token punctuation">)</span>    <span class="token comment">// 子组件触发name改变</span>  provideState<span class="token punctuation">.</span><span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="14-Vue3中使用echarts"><a href="#14-Vue3中使用echarts" class="headerlink" title="14. Vue3中使用echarts"></a>14. Vue3中使用echarts</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 安装</span>cnpm i echarts <span class="token operator">--</span>save<span class="token comment">// 组件内引入</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> echarts <span class="token keyword">from</span> <span class="token string">'echarts'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端,vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 + Vite + Pinia + Ts</title>
      <link href="/xiatian.github.io/2022/02/09/vue3/"/>
      <url>/xiatian.github.io/2022/02/09/vue3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-开始前准备"><a href="#1-开始前准备" class="headerlink" title="1. 开始前准备"></a>1. 开始前准备</h2><blockquote><p>项目地址 <a href="https://github.com/xiatiancheng/vue3-Ts-Pinia">https://github.com/xiatiancheng/vue3-Ts-Pinia</a></p></blockquote><p><img src="https://s4.ax1x.com/2022/02/08/H3s4oV.png" alt="node版本"></p><h2 id="2-项目构建（Ts版）"><a href="#2-项目构建（Ts版）" class="headerlink" title="2. 项目构建（Ts版）"></a>2. 项目构建（Ts版）</h2><blockquote><p>npm init vite</p></blockquote><blockquote><p>npm install </p></blockquote><p><img src="https://s4.ax1x.com/2022/02/08/H3248f.png" alt="vite创建项目"><br><img src="https://s4.ax1x.com/2022/02/08/H3RZRK.png" alt="项目目录"></p><h2 id="3-安装依赖-pinia-类似vuex"><a href="#3-安装依赖-pinia-类似vuex" class="headerlink" title="3. 安装依赖 pinia 类似vuex"></a>3. 安装依赖 pinia 类似vuex</h2><h3 id="1-1-Pinia特点"><a href="#1-1-Pinia特点" class="headerlink" title="1.1 Pinia特点"></a>1.1 Pinia特点</h3><ol><li>完整的 typescript 的支持；</li><li>足够轻量，压缩后的体积只有1.6kb;</li><li>去除 mutations，只有 state，getters，actions；</li><li>actions 支持同步和异步；</li><li>没有模块嵌套，只有 store 的概念，store 之间可以自由使用，更好的代码分割； </li><li>无需手动添加 store，store 一旦创建便会自动添加；</li></ol><h3 id="1-2-安装Pinia"><a href="#1-2-安装Pinia" class="headerlink" title="1.2 安装Pinia"></a>1.2 安装Pinia</h3><blockquote><p>npm install pinia –save</p></blockquote><h3 id="1-3-新建-src-store-目录并在其下面创建-user-ts"><a href="#1-3-新建-src-store-目录并在其下面创建-user-ts" class="headerlink" title="1.3 新建 src/store 目录并在其下面创建 user.ts"></a>1.3 新建 src/store 目录并在其下面创建 user.ts</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token keyword">export</span> <span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token comment">// id必填，且需要唯一</span>    <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">"夏天"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-src-main-ts-里如下"><a href="#1-4-src-main-ts-里如下" class="headerlink" title="1.4 src/main.ts 里如下:"></a>1.4 src/main.ts 里如下:</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token keyword">import</span> piniaPluginPersist <span class="token keyword">from</span> <span class="token string">'pinia-plugin-persist'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>piniaPluginPersist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-vite-config-ts-配置别名"><a href="#4-vite-config-ts-配置别名" class="headerlink" title="4. vite.config.ts 配置别名"></a>4. vite.config.ts 配置别名</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vite"</span><span class="token punctuation">;</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dir<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    base<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    resolve<span class="token operator">:</span> <span class="token punctuation">{</span>    alias<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'comps'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/components'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'apis'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/apis'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'views'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/views'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'utils'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/utils'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'routes'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/routes'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'styles'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/styles'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    build<span class="token operator">:</span> <span class="token punctuation">{</span>        target<span class="token operator">:</span> <span class="token string">'modules'</span><span class="token punctuation">,</span>        outDir<span class="token operator">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span>        assetsDir<span class="token operator">:</span> <span class="token string">'assets'</span><span class="token punctuation">,</span>        minify<span class="token operator">:</span> <span class="token string">'terser'</span> <span class="token comment">// 混淆器</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    server<span class="token operator">:</span> <span class="token punctuation">{</span>        cors<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        open<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        proxy<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">'/api'</span><span class="token operator">:</span> <span class="token punctuation">{</span>            target<span class="token operator">:</span> <span class="token string">'http://192.168.99.223:3000'</span><span class="token punctuation">,</span>   <span class="token comment">//代理接口</span>            changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token function-variable function">rewrite</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\/api</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-安装依赖-否则-import-path-from-“path”-找不到模块-“path“-或其相对应的类型声明"><a href="#5-安装依赖-否则-import-path-from-“path”-找不到模块-“path“-或其相对应的类型声明" class="headerlink" title="5. 安装依赖 否则 import path from “path”; 找不到模块 “path“ 或其相对应的类型声明"></a>5. 安装依赖 否则 import path from “path”; 找不到模块 “path“ 或其相对应的类型声明</h2><blockquote><p>npm install @types/node –save-dev </p></blockquote><h2 id="6-src-components-HelloWorld-vue"><a href="#6-src-components-HelloWorld-vue" class="headerlink" title="6. src/components/HelloWorld.vue"></a>6. src/components/HelloWorld.vue</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> userStore<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span> setup<span class="token operator">&gt;</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/store/user"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-1-computed-也可以获取userStore"><a href="#6-1-computed-也可以获取userStore" class="headerlink" title="6.1 computed 也可以获取userStore"></a>6.1 computed 也可以获取userStore</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span> setup<span class="token operator">&gt;</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> userStore<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-这样解构赋值也是ok的"><a href="#6-2-这样解构赋值也是ok的" class="headerlink" title="6.2 这样解构赋值也是ok的"></a>6.2 这样解构赋值也是ok的</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span> setup<span class="token operator">&gt;</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> storeToRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/store/user"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>userStore<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-在-tsconfig-json-文件中-新增，否则-“-store-user”-找不到模块“-store-user”或其相应的类型声明"><a href="#7-在-tsconfig-json-文件中-新增，否则-“-store-user”-找不到模块“-store-user”或其相应的类型声明" class="headerlink" title="7. 在 tsconfig.json 文件中,新增，否则 “@/store/user”  找不到模块“@/store/user”或其相应的类型声明"></a>7. 在 tsconfig.json 文件中,新增，否则 “@/store/user”  找不到模块“@/store/user”或其相应的类型声明</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token string">"target"</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span>        <span class="token string">"useDefineForClassFields"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"module"</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span>        <span class="token string">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>        <span class="token string">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"jsx"</span><span class="token operator">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>        <span class="token string">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"resolveJsonModule"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"esnext"</span><span class="token punctuation">,</span> <span class="token string">"dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>        <span class="token comment">// 新增 解决@ 报错</span>        <span class="token string">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string">"@/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"src/*"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.ts"</span><span class="token punctuation">,</span> <span class="token string">"src/**/*.d.ts"</span><span class="token punctuation">,</span> <span class="token string">"src/**/*.tsx"</span><span class="token punctuation">,</span> <span class="token string">"src/**/*.vue"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-好了-重启项目"><a href="#8-好了-重启项目" class="headerlink" title="8. 好了 重启项目"></a>8. 好了 重启项目</h2><p><img src="https://s4.ax1x.com/2022/02/09/HGPtx0.png" alt="启动项目"></p><h2 id="9-通过-actions-去修改-state，action-里可以直接通过-this-访问"><a href="#9-通过-actions-去修改-state，action-里可以直接通过-this-访问" class="headerlink" title="9. 通过 actions 去修改 state，action 里可以直接通过 this 访问"></a>9. 通过 actions 去修改 state，action 里可以直接通过 this 访问</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"pinia"</span><span class="token punctuation">;</span><span class="token comment">// defineStore 调用后返回一个函数，调用该函数获得 Store 实体</span><span class="token keyword">export</span> <span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>    <span class="token comment">// state: 返回对象的函数</span>    <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">"夏天"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>      actions<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 在Vuex实现需要两步  1.定义mutations 2.提交mutations</span>        <span class="token function">updateName</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span>string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// action 支持 async/await 的语法，轻松应付异步处理的场景。</span>        <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token parameter">account<span class="token punctuation">,</span> pwd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> api<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span>            <span class="token keyword">return</span> data        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-src-components-HelloWorld-vue中-修改state"><a href="#10-src-components-HelloWorld-vue中-修改state" class="headerlink" title="10. src/components/HelloWorld.vue中 修改state"></a>10. src/components/HelloWorld.vue中 修改state</h2><h3 id="10-1-通过actions来修改"><a href="#10-1-通过actions来修改" class="headerlink" title="10.1 通过actions来修改"></a>10.1 通过actions来修改</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span> setup<span class="token operator">&gt;</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> storeToRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/store/user"</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>userStore<span class="token punctuation">)</span>    <span class="token comment">// 修改夏天为叮叮咚</span>    userStore<span class="token punctuation">.</span><span class="token function">updateName</span><span class="token punctuation">(</span><span class="token string">'叮叮咚'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-最简单的方式"><a href="#10-2-最简单的方式" class="headerlink" title="10.2 最简单的方式"></a>10.2 最简单的方式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">userStore<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"夏天的故事"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="10-3-patch一个函数-适合批量"><a href="#10-3-patch一个函数-适合批量" class="headerlink" title="10.3 $patch一个函数 适合批量"></a>10.3 $patch一个函数 适合批量</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">userStore<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token operator">:</span>any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"朝闻道"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-getters"><a href="#11-getters" class="headerlink" title="11.getters"></a>11.getters</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"pinia"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> otherState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/store/otherState.ts"</span><span class="token punctuation">;</span><span class="token comment">// defineStore 调用后返回一个函数，调用该函数获得 Store 实体</span><span class="token keyword">export</span> <span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  id<span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">"夏天"</span><span class="token punctuation">,</span>      count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 类似组件的 computed, 用来封装计算属性，有缓存的功能</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 函数接受一个可选参数 state 状态对象</span>    <span class="token function">countPlus10</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"countPlus调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 如果getters 中使用了this不接受state参数，则必须手动指定返回值的类型，否则无法推导出来</span>    <span class="token function">countPlus20</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 获取其它 Getter， 直接通过 this</span>    <span class="token function">countOtherPlus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>countPlus20<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 使用其它 Store</span>    <span class="token function">otherStoreCount</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 这里是其他的 Store，调用获取 Store，就和在 setup 中一样</span>      <span class="token keyword">const</span> otherStore <span class="token operator">=</span> <span class="token function">useOtherStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> otherStore<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 在Vuex实现需要两步  1.定义mutations 2.提交mutations</span>    <span class="token function">updateName</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用  userStore.countPlus10</p></blockquote><h2 id="12-插件-pinia-plugin-persist-可以辅助实现数据持久化功能。"><a href="#12-插件-pinia-plugin-persist-可以辅助实现数据持久化功能。" class="headerlink" title="12. 插件 pinia-plugin-persist 可以辅助实现数据持久化功能。"></a>12. 插件 pinia-plugin-persist 可以辅助实现数据持久化功能。</h2><blockquote><p>npm i pinia-plugin-persist –save</p></blockquote><h3 id="12-1-在-store-user-ts里开启数据缓存"><a href="#12-1-在-store-user-ts里开启数据缓存" class="headerlink" title="12.1 在 store/user.ts里开启数据缓存"></a>12.1 在 store/user.ts里开启数据缓存</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 开启数据缓存</span>persist<span class="token operator">:</span> <span class="token punctuation">{</span>  enabled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  strategies<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        storage<span class="token operator">:</span> localStorage<span class="token punctuation">,</span> <span class="token comment">// 只持久存储name和age到localStorage</span>        paths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s4.ax1x.com/2022/02/09/HGN7Mq.png" alt="开启数据缓存"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端, Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript总结</title>
      <link href="/xiatian.github.io/2022/02/05/typescript-zong-jie/"/>
      <url>/xiatian.github.io/2022/02/05/typescript-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基础类型"><a href="#1-基础类型" class="headerlink" title="1.基础类型"></a>1.基础类型</h2><ul><li>常用：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">boolean、number、string、array、<span class="token keyword">enum</span>、any、<span class="token keyword">void</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>不常用：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">tuple、<span class="token keyword">null</span>、undefine、never<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2、对象类型"><a href="#2、对象类型" class="headerlink" title="2、对象类型"></a>2、对象类型</h2></li><li>简单理解interface 和 type 的区别：type 更强大，interface 可以进行声明合并，type 不行</li><li>一般声明都用interface，需要用到其他变量类型，type多一些。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> string<span class="token punctuation">;</span>    age<span class="token operator">:</span> number<span class="token punctuation">;</span>    skill<span class="token operator">:</span> string<span class="token punctuation">;</span>    skinNum<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">;</span> <span class="token comment">// say函数返回值为string</span>    <span class="token punctuation">[</span>propname<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span> <span class="token comment">// 当前Hero可定义任意字符串类型的key</span><span class="token punctuation">}</span><span class="token comment">// 继承</span><span class="token keyword">interface</span> <span class="token class-name">littleSoldier</span> <span class="token keyword">extends</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>    <span class="token function">rush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 任意类型</span><span class="token keyword">interface</span> <span class="token class-name">IAnyObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span><span class="token punctuation">}</span>type Hero <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> string<span class="token punctuation">,</span>    age<span class="token operator">:</span> number<span class="token punctuation">,</span>    skill<span class="token operator">:</span> string<span class="token punctuation">,</span>    skinNum<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3、数组类型"><a href="#3、数组类型" class="headerlink" title="3、数组类型"></a>3、数组类型</h2><ul><li>项目中常见的写法，需要声明列表数据类型：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">IItem</span> <span class="token punctuation">{</span>    id<span class="token operator">:</span> number<span class="token punctuation">;</span>    name<span class="token operator">:</span> string<span class="token punctuation">;</span>    isDad<span class="token operator">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> objectArr<span class="token operator">:</span> IItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'俊劫'</span><span class="token punctuation">,</span> isGod<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// or</span><span class="token keyword">const</span> objectArr<span class="token operator">:</span> Array<span class="token operator">&lt;</span>IItem<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'俊劫'</span><span class="token punctuation">,</span> isGod<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> numberArr<span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token punctuation">(</span>number <span class="token operator">|</span> string<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4、元组-tuple"><a href="#4、元组-tuple" class="headerlink" title="4、元组 tuple"></a>4、元组 tuple</h2><ul><li>元组和数组类似，但是类型注解时会不一样</li><li>赋值的类型、位置、个数需要和定义（生明）的类型、位置、个数一致</li><li>数组 某个位置的值可以是注解中的任何一个<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">LOL</span><span class="token operator">:</span> <span class="token punctuation">(</span>string <span class="token operator">|</span> number<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zed"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"darts"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 元祖 每一项数据类型必须一致</span><span class="token keyword">const</span> <span class="token constant">LOL</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> string<span class="token punctuation">,</span> number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zed"</span><span class="token punctuation">,</span> <span class="token string">"darts"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5、联合-or-交叉-amp-类型"><a href="#5、联合-or-交叉-amp-类型" class="headerlink" title="5、联合| or 交叉&amp;类型"></a>5、联合| or 交叉&amp;类型</h2><ul><li>联合类型：某个变量可能是多个 interface 中的其中一个，用 | 分割</li><li>交叉类型：由多个类型组成，用 &amp; 连接<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// anjiao 某胖博主爱好</span><span class="token keyword">interface</span> <span class="token class-name">Waiter</span> <span class="token punctuation">{</span>    anjiao<span class="token operator">:</span> boolean<span class="token punctuation">;</span>    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    anjiao<span class="token operator">:</span> boolean<span class="token punctuation">;</span>    <span class="token function-variable function">skill</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 联合类型</span><span class="token keyword">function</span> <span class="token function">judgeWho</span><span class="token punctuation">(</span><span class="token parameter">animal<span class="token operator">:</span> Waiter <span class="token operator">|</span> Teacher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 交叉类型 </span><span class="token comment">// 同名类型会进行合并，同名基础类型属性的合并返回：never</span><span class="token comment">// 同名非基础类型属性可以正常合并</span><span class="token keyword">function</span> <span class="token function">judgeWho</span><span class="token punctuation">(</span><span class="token parameter">jishi<span class="token operator">:</span> Waiter <span class="token operator">&amp;</span> Teacher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="6、enum枚举"><a href="#6、enum枚举" class="headerlink" title="6、enum枚举"></a>6、enum枚举</h2><ul><li>提高代码可维护性，统一维护某些枚举值，避免 JiShi === 1这种魔法数字。JiShi === JiShiEnum.BLUEJ</li><li>默认情况下，第一个枚举值是 0，然后每个后续值依次递增 1<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 初始值默认为 0</span><span class="token keyword">enum</span> JiShiEnum <span class="token punctuation">{</span>    <span class="token constant">REDJ</span><span class="token punctuation">,</span>    <span class="token constant">BLUEJ</span><span class="token punctuation">,</span>    <span class="token constant">GREENJ</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// 设置初始值</span><span class="token keyword">enum</span> JiShiEnum <span class="token punctuation">{</span>    <span class="token constant">REDJ</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>    <span class="token constant">BLUEJ</span><span class="token punctuation">,</span>    <span class="token constant">GREENJ</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> jishi<span class="token operator">:</span> JiShiEnum <span class="token operator">=</span> JiShiENUM<span class="token punctuation">.</span><span class="token constant">BLUEJ</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>jishi<span class="token punctuation">)</span> <span class="token comment">// 9</span><span class="token comment">// 字符串枚举，每个都需要声明</span><span class="token keyword">enum</span> JiShiEnum <span class="token punctuation">{</span>    <span class="token constant">REDJ</span> <span class="token operator">=</span> <span class="token string">"8号"</span><span class="token punctuation">,</span>    <span class="token constant">BLUEJ</span> <span class="token operator">=</span> <span class="token string">"9号"</span><span class="token punctuation">,</span>    <span class="token constant">GREENJ</span> <span class="token operator">=</span> <span class="token string">"10号"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="7、泛型-T（Type）"><a href="#7、泛型-T（Type）" class="headerlink" title="7、泛型 T（Type）"></a>7、泛型 T（Type）</h2><ul><li>简单说就是：泛指的类型，不确定的类型，可以理解为一个占位符（使用T只是习惯，使用任何字母都行）</li><li>K（Key）：表示对象中的键类型</li><li>V（Value）：表示对象中的值类型</li><li>E（Element）：表示元素类型<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// T 自定义名称</span><span class="token keyword">function</span> myFun<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> params<span class="token punctuation">;</span><span class="token punctuation">}</span>myFun <span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 定义多个泛型</span><span class="token keyword">function</span> join<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>first<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>first<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>second<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span>join <span class="token operator">&lt;</span>number<span class="token punctuation">,</span> string<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="8、断言"><a href="#8、断言" class="headerlink" title="8、断言"></a>8、断言</h2><ul><li>主要通过 as 语法，告诉ts这个变量属于哪个类型，一般用在你比 TypeScript 更了解某个值的详细信息。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">judgeWho</span><span class="token punctuation">(</span><span class="token parameter">animal<span class="token operator">:</span> Waiter <span class="token operator">|</span> Teacher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>animal<span class="token punctuation">.</span>anjiao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Teacher<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Waiter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="9、in"><a href="#9、in" class="headerlink" title="9、in"></a>9、in</h2><ul><li>类似于数组和字符串的 includes 方法<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">judgeWhoTwo</span><span class="token punctuation">(</span><span class="token parameter">animal<span class="token operator">:</span> Waiter <span class="token operator">|</span> Teacher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"skill"</span> <span class="token keyword">in</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        animal<span class="token punctuation">.</span><span class="token function">skill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        animal<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="10、类型注解"><a href="#10、类型注解" class="headerlink" title="10、类型注解"></a>10、类型注解</h2><ul><li>显式的告诉代码，我们的 count 变量就是一个数字类型，这就叫做类型注解<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> count<span class="token operator">:</span> number<span class="token punctuation">;</span> <span class="token comment">// 类型注解</span>count <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="11、类型推断"><a href="#11、类型推断" class="headerlink" title="11、类型推断"></a>11、类型推断</h2><ul><li>如果 TS 能够自动分析变量类型， 我们就什么也不需要做了</li><li>如果 TS 无法分析变量类型的话， 我们就需要使用类型注解<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ts可以推断出count 为number类型</span><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="12、void和never"><a href="#12、void和never" class="headerlink" title="12、void和never"></a>12、void和never</h2><ul><li>返回值类型，也算是基础类型。没有返回值的函数: void<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>如果一个函数是永远也执行不完的，就可以定义返回值为 never<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">errorFuntion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> never <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>一个函数有入参，也有出参，项目中的常规写法：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义</span><span class="token keyword">interface</span> <span class="token class-name">IGirl</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> string<span class="token punctuation">,</span>    age<span class="token operator">:</span> number<span class="token punctuation">,</span>    skill<span class="token operator">:</span> string<span class="token punctuation">,</span>    isAnMo<span class="token operator">:</span> boolean<span class="token punctuation">;</span>    number<span class="token operator">:</span> JiShiEnum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 定义搜索的入参</span><span class="token keyword">interface</span> <span class="token class-name">ISearchParams</span> <span class="token keyword">extends</span> <span class="token class-name">IGirl</span><span class="token punctuation">{</span>    serviceTime<span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IGetGirls</span> <span class="token punctuation">{</span>    data<span class="token operator">:</span> IGirl<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 函数主体</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getGirls</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token operator">:</span> ISearchParams</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>IGetGirls<span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/dabaojian/getGirls</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>        data<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="13、类型检测"><a href="#13、类型检测" class="headerlink" title="13、类型检测"></a>13、类型检测</h2><h3 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1.typeof"></a>1.typeof</h3><ul><li>typeof 操作符可以用来获取一个变量或对象的类型<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> string<span class="token punctuation">;</span>    skill<span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> zed<span class="token operator">:</span> Hero <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"影流之主"</span><span class="token punctuation">,</span> skill<span class="token operator">:</span> <span class="token string">"影子"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>type <span class="token constant">LOL</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> zed<span class="token punctuation">;</span> <span class="token comment">// type LOL = Hero</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在上面代码中，我们通过 typeof 操作符获取 zed 变量的类型并赋值给 LOL 类型变量，之后我们就可以使用 LOL 类型<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> ahri<span class="token operator">:</span> <span class="token constant">LOL</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"阿狸"</span><span class="token punctuation">,</span> skill<span class="token operator">:</span> <span class="token string">"魅惑"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2.instanceof"></a>2.instanceof</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">NumberObj</span> <span class="token punctuation">{</span>    count<span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">addObj</span><span class="token punctuation">(</span><span class="token parameter">first<span class="token operator">:</span> object <span class="token operator">|</span> NumberObj<span class="token punctuation">,</span> second<span class="token operator">:</span> object <span class="token operator">|</span> NumberObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">NumberObj</span> <span class="token operator">&amp;&amp;</span> second <span class="token keyword">instanceof</span> <span class="token class-name">NumberObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> first<span class="token punctuation">.</span>count <span class="token operator">+</span> second<span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-keyof"><a href="#3-keyof" class="headerlink" title="3.keyof"></a>3.keyof</h3></li><li>keyof 与 Object.keys 略有相似，只不过 keyof 取 interface 的键<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>    x<span class="token operator">:</span> number<span class="token punctuation">;</span>    y<span class="token operator">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// type keys = "x" | "y"</span>type keys <span class="token operator">=</span> keyof Point<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>用 keyof 可以更好的定义数据类型<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> get<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>o<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> o<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="14、ts的优缺点"><a href="#14、ts的优缺点" class="headerlink" title="14、ts的优缺点"></a>14、ts的优缺点</h2><p>代码的可读性和可维护性：举个🌰看后端某个接口返回值，一般需要去network看or去看接口文档，才知道返回数据结构，而正确用了ts后，编辑器会提醒接口返回值的类型，这点相当实用。在编译阶段就发现大部分错误，避免了很多线上bug 增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端, TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6总结</title>
      <link href="/xiatian.github.io/2022/02/04/es6/"/>
      <url>/xiatian.github.io/2022/02/04/es6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-关于取值"><a href="#1-关于取值" class="headerlink" title="1.关于取值"></a>1.关于取值</h2><ul><li>取值在程序中非常常见，比如从对象obj中取值。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>    d<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span>    e<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>吐槽：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> obj<span class="token punctuation">.</span>a<span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> obj<span class="token punctuation">.</span>b<span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> obj<span class="token punctuation">.</span>c<span class="token punctuation">;</span><span class="token keyword">const</span> d <span class="token operator">=</span> obj<span class="token punctuation">.</span>d<span class="token punctuation">;</span><span class="token keyword">const</span> e <span class="token operator">=</span> obj<span class="token punctuation">.</span>e<span class="token punctuation">;</span><span class="token keyword">const</span> f <span class="token operator">=</span> obj<span class="token punctuation">.</span>a <span class="token operator">+</span> obj<span class="token punctuation">.</span>d<span class="token punctuation">;</span><span class="token keyword">const</span> g <span class="token operator">=</span> obj<span class="token punctuation">.</span>c <span class="token operator">+</span> obj<span class="token punctuation">.</span>e<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>改进：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token keyword">const</span> f <span class="token operator">=</span> a <span class="token operator">+</span> d<span class="token punctuation">;</span><span class="token keyword">const</span> g <span class="token operator">=</span> c <span class="token operator">+</span> e<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>a<span class="token operator">:</span>a1<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>补充：ES6的解构赋值虽然好用。但是要注意解构的对象不能为undefined、null。否则会报错，故要给被解构的对象一个默认值。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">}</span> <span class="token operator">=</span> obj <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="2-关于合并数据"><a href="#2-关于合并数据" class="headerlink" title="2.关于合并数据"></a>2.关于合并数据</h2><ul><li>比如合并两个数组，合并两个对象</li><li>吐槽：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,2,3,1,5,6]</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//{a:1,b:1}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>改进：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span><span class="token operator">...</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//[1,2,3,5,6]</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>b<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span><span class="token operator">...</span>obj2<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//{a:1,b:1}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-关于拼接字符串"><a href="#3-关于拼接字符串" class="headerlink" title="3.关于拼接字符串"></a>3.关于拼接字符串</h2><ul><li>吐槽：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span><span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">59</span><span class="token punctuation">;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>result <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的考试成绩及格</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>result <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的考试成绩不及格</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>改进：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span><span class="token keyword">const</span> score <span class="token operator">=</span> <span class="token number">59</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>score <span class="token operator">&gt;</span> <span class="token number">60</span><span class="token operator">?</span><span class="token string">'的考试成绩及格'</span><span class="token operator">:</span><span class="token string">'的考试成绩不及格'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-关于if中判断条件"><a href="#4-关于if中判断条件" class="headerlink" title="4.关于if中判断条件"></a>4.关于if中判断条件</h2><ul><li>吐槽：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>    type <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span>    type <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span>    type <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">||</span>    type <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">||</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>改进：ES6中数组实例方法includes<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> condition <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> condition<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-关于列表搜索"><a href="#5-关于列表搜索" class="headerlink" title="5.关于列表搜索"></a>5.关于列表搜索</h2><ul><li>在项目中，一些没分页的列表的搜索功能由前端来实现，搜索一般分为精确搜索和模糊搜索。搜索也要叫过滤，一般用filter来实现。</li><li>吐槽：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>改进：find方法中找到符合条件的项，就不会继续遍历数组。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="6-关于扁平化数组"><a href="#6-关于扁平化数组" class="headerlink" title="6.关于扁平化数组"></a>6.关于扁平化数组</h2><ul><li>一个部门JSON数据中，属性名是部门id，属性值是个部门成员id数组集合，现在要把有部门的成员id都提取到一个数组集合中</li><li>吐槽：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> deps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'采购部'</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'人事部'</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'行政部'</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'运输部'</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> member <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> deps<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> deps<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        member <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>member<span class="token punctuation">,</span><span class="token operator">...</span>value<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>member <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>改进：获取对象的全部属性值Object.values  ES6提供的flat方法，其中使用Infinity作为flat的参数，使得无需知道被扁平化的数组的维度。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> deps <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'采购部'</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'人事部'</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'行政部'</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'运输部'</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> member <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>补充：flat方法不支持IE浏览器。</li></ul><h2 id="7-关于获取对象属性值"><a href="#7-关于获取对象属性值" class="headerlink" title="7.关于获取对象属性值"></a>7.关于获取对象属性值</h2><ul><li>吐槽：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>改进：ES6中的可选链操作符<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> obj<span class="token operator">?.</span>name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="8-关于添加对象属性"><a href="#8-关于添加对象属性" class="headerlink" title="8.关于添加对象属性"></a>8.关于添加对象属性</h2><ul><li>当给对象添加属性时，如果属性名是动态变化的，该怎么处理。</li><li>吐槽：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">topic</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'话题内容'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>改进：ES6中的对象属性名是可以用表达式<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">topic</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'话题内容'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="9-关于输入框非空的判断"><a href="#9-关于输入框非空的判断" class="headerlink" title="9.关于输入框非空的判断"></a>9.关于输入框非空的判断</h2><ul><li>在处理输入框相关业务时，往往会判断输入框未输入值的场景。</li><li>吐槽：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>改进：ES6中新出的空值合并运算符<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">??</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="10-关于异步函数"><a href="#10-关于异步函数" class="headerlink" title="10.关于异步函数"></a>10.关于异步函数</h2><ul><li>异步函数很常见，经常是用 Promise 来实现。</li><li>吐槽：如果这样调用异步函数，会形成地狱回调<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res1</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>        <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res2</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>改进：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>补充：但是要做并发请求时，还是要用到Promise.all()。<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1,2]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题记录</title>
      <link href="/xiatian.github.io/2022/01/22/vue/"/>
      <url>/xiatian.github.io/2022/01/22/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="1-vue2-gt-vue3-生命周期"><a href="#1-vue2-gt-vue3-生命周期" class="headerlink" title="1.vue2 -> vue3 生命周期"></a>1.vue2 -&gt; vue3 生命周期</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">beforeCreate <span class="token operator">-</span><span class="token operator">&gt;</span> 使用 <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>created <span class="token operator">-</span><span class="token operator">&gt;</span> 使用 <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>beforeMount <span class="token operator">-</span><span class="token operator">&gt;</span> onBeforeMountmounted <span class="token operator">-</span><span class="token operator">&gt;</span> onMountedbeforeUpdate <span class="token operator">-</span><span class="token operator">&gt;</span> onBeforeUpdateupdated <span class="token operator">-</span><span class="token operator">&gt;</span> onUpdatedbeforeDestroy <span class="token operator">-</span><span class="token operator">&gt;</span> onBeforeUnmountdestroyed <span class="token operator">-</span><span class="token operator">&gt;</span> onUnmounted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-父子组件传值"><a href="#2-父子组件传值" class="headerlink" title="2.父子组件传值"></a>2.父子组件传值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、父子组件通信    <span class="token operator">-</span> props    <span class="token operator">-</span> $emit<span class="token operator">/</span>$on    <span class="token operator">-</span> $children<span class="token operator">/</span>$parent    <span class="token operator">-</span> $attrs<span class="token operator">/</span>$listeners    <span class="token operator">-</span> ref<span class="token number">2</span>、兄弟组件    <span class="token operator">-</span> $parent    <span class="token operator">-</span> $root    <span class="token operator">-</span> eventbus    <span class="token operator">-</span> vuex<span class="token number">3</span>、跨层级关系    <span class="token operator">-</span> eventbus    <span class="token operator">-</span> vuex    <span class="token operator">-</span> provide<span class="token operator">/</span>inject<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-data-为什么是一个函数而不是对象"><a href="#3-data-为什么是一个函数而不是对象" class="headerlink" title="3.data 为什么是一个函数而不是对象"></a>3.data 为什么是一个函数而不是对象</h2><ol><li>函数每次执行都会返回全新data对象实例</li><li>在JS当中实例是通过构造函数来创建的，每个构造函数可以new出很多个实例，那么每个实例都会继承原型上的方法或属性。</li><li>因为使用对象的话，每个实例（组件）上使用的data数据是相互影响的，这当然就不是我们想要的了。对象是对于内存地址的引用，直接定义个对象的话组件之间都会使用这个对象，这样会造成组件之间数据相互影响。</li></ol><h2 id="4-v-if-和-v-for-哪个优先级高"><a href="#4-v-if-和-v-for-哪个优先级高" class="headerlink" title="4.v-if 和 v-for 哪个优先级高"></a>4.v-if 和 v-for 哪个优先级高</h2><ol><li>v-for优先于v-if 被解析</li><li>如果同时出现，每次渲染都会先执行循环在判断条件，无论如何，循环都不可避免，浪费了性能</li><li>要避免出现这种情况，可以在外层嵌套 template，在这一层加v-if，然后内部进行v-for循环</li><li>如果条件出现在循环内部，可通过计算属性提前过滤掉那些不需要显示的项</li></ol><h2 id="5-你知道-vue-中-key-的作用和工作原理吗？说说你对它的理解"><a href="#5-你知道-vue-中-key-的作用和工作原理吗？说说你对它的理解" class="headerlink" title="5.你知道 vue 中 key 的作用和工作原理吗？说说你对它的理解"></a>5.你知道 vue 中 key 的作用和工作原理吗？说说你对它的理解</h2><ol><li>key 的作用主要就是为了高效的更新DOM，其原理是vue在patch过程中通过key可以精准判断两个节点是否是同一个，从而避免频繁的更新相同元素，使得整个patch过程更加高效，减少DOM操作量，提高性能。</li><li>如果不设置key，还可能在列表更新时引发一些隐藏bug</li><li>vue中在使用相同标签名元素的过度切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，否则vue 只会替换其内部属性而不会触发过度效果。</li></ol><h2 id="6-谈谈你对-MVC、MVP-和-MVVM-的理解"><a href="#6-谈谈你对-MVC、MVP-和-MVVM-的理解" class="headerlink" title="6.谈谈你对 MVC、MVP 和 MVVM 的理解"></a>6.谈谈你对 MVC、MVP 和 MVVM 的理解</h2><ol><li>这三个都是框架模式，它们设计的目标都是解决Model和View的耦合问题</li><li>MVC模式出现比较早，主要应用在后端，在前端领域的早期也有应用，如Backbone.js。它的优点是分层清晰，缺点是数据流混乱，灵活性带来的维护性问题</li><li>MVP模式是MVC的进化形式，Presenter作为中间层负责MV通信，解决了两者耦合问题，但P层过于臃肿会导致维护问题</li><li>MVVM模式在前端领域有广泛的应用，它不仅解决MV耦合问题，还同时解决了维护两者映射关系的大量繁杂代码和DOM操作代码，在提高开发效率、可读性同时还保持了优越的性能表现。</li></ol><h2 id="7-你了解哪些-vue-性能优化的方法"><a href="#7-你了解哪些-vue-性能优化的方法" class="headerlink" title="7.你了解哪些 vue 性能优化的方法"></a>7.你了解哪些 vue 性能优化的方法</h2><ol><li>路由懒加载</li><li>keep-alive缓存页面</li><li>v-show复用DOM</li><li>v-for遍历避免同时使用v-if</li><li>长列表性能优化<ul><li>纯数据，非响应式的可以 使用 object.freeze 冻结</li><li>大数据长列表，可采用虚拟滚动，只渲染少部分内容 （vue-virtual-scroller、vue-virtual-scroll-list）</li></ul></li><li>事件的销毁</li><li>图片的懒加载 （vue-lazyload）</li><li>第三方插件按需引入</li><li>无状态组件标记为函数组件 functional</li><li>子组件分割</li><li>变量本地化</li><li>SSR （SEO、首屏渲染）</li></ol><h2 id="7-vue3-新特性"><a href="#7-vue3-新特性" class="headerlink" title="7.vue3 新特性"></a>7.vue3 新特性</h2><ol><li>更快</li></ol><ul><li>虚拟DOM重写（编译时提示减少运行时开销，使用更有效的代码创建虚拟节点。组件快速路径+单个调用+子节点类型检查。跳过不必要的条件分支。js引擎更容易优化）</li><li>优化slots的生成（vue3中可以单独重新渲染父级和子级。确保实例正确的跟踪依赖关系。避免不必要的父子组件重新渲染）</li><li>静态树提升（内存换时间，Vue3 的编译器将能够检测到什么是静态的，然后将其提升，从而降低了渲染成本。跳过修补整棵树，从而降低渲染成本。即使多次出现也能正常工作 ）</li><li>静态属性提升 （Vue3 打补丁时将跳过这些属性不会改变的节点）</li><li>基于Proxy的响应式系统 （组件实例初始化的速度提高100％ 。使用Proxy节省以前一半的内存开销，加快速度，但是存在低浏览器版本的不兼容。为了继续支持IE11，Vue3 将发布一个支持旧观察者机制和新 Proxy 版本的构建）</li></ul><ol start="2"><li>更小</li></ol><ul><li>通过摇树优化核心库体积</li></ul><ol start="3"><li>更容易维护</li></ol><ul><li>TS+模块化 （它不仅会使用 TypeScript，而且许多包被解耦，更加模块化。）</li></ul><ol start="4"><li>更加友好</li></ol><ul><li>跨平台：编译器核心和运行时核心与平台无关</li></ul><ol start="5"><li>更容易使用</li></ol><ul><li>改进ts支持，编译器提供更好的类型检查和错误及警告</li><li>更好的调试支持</li><li>独立的响应式模块</li><li>Composition API</li></ul><h3 id="7-1-Vue-js-3-0-放弃-defineProperty-使用-Proxy-的原因"><a href="#7-1-Vue-js-3-0-放弃-defineProperty-使用-Proxy-的原因" class="headerlink" title="7.1 Vue.js 3.0 放弃 defineProperty, 使用 Proxy 的原因"></a>7.1 Vue.js 3.0 放弃 defineProperty, 使用 Proxy 的原因</h3><p>Object.defineProperty缺陷</p><ol><li>监控到数组下标的变化时，开销很大。所以Vue.js放弃了下标变化的检测；</li><li>Object.defineProperty只能劫持对象的属性，而Proxy是直接代理对象。Object.defineProperty需要遍历对象的每个属性，如果属性值也是对象，则需要深度遍历。而 Proxy 直接代理对象，不需要遍历操作。</li><li>Object.defineProperty对新增属性需要手动进行Observe。vue2时需要使用 vm.$set 才能保证新增的属性也是响应式</li><li>Proxy支持13种拦截操作，这是defineProperty所不具有的</li><li>Proxy 作为新标准，长远来看，JS引擎会继续优化 Proxy，但 getter 和 setter 基本不会再有针对性优化</li></ol><h3 id="7-2-Vue-的双向数据绑定原理是什么？"><a href="#7-2-Vue-的双向数据绑定原理是什么？" class="headerlink" title="7.2 Vue 的双向数据绑定原理是什么？"></a>7.2 Vue 的双向数据绑定原理是什么？</h3><ol><li>原理（Vue2.x）</li></ol><ul><li>Vue.js它是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter；</li><li>在数据变动时发布消息给订阅者，触发相应的监听回调。</li><li>vue3中使用了ES6的Proxy(代理)代理和数据data绑定之后，任何操作都会经过代理实现，就没有了监听不到的情况。</li><li>在vue3中，通常使用ref和reactive进行数据绑定,注意其获取数值方式的.value方法而非直接获取。</li></ul><blockquote><p>面试简单来说：defineProterty 是劫持对象的数据,而 proxy 是整个对象</p></blockquote><h3 id="7-3-Vue中如何检测数组的变化？"><a href="#7-3-Vue中如何检测数组的变化？" class="headerlink" title="7.3 Vue中如何检测数组的变化？"></a>7.3 Vue中如何检测数组的变化？</h3><p>vue中对数组没有进行defineProperty，而是重写了数组的7个方法。 分别是：</p><ol><li>push</li><li>shift</li><li>pop</li><li>splice</li><li>unshift</li><li>sort</li><li>reverse<br>因为这些方法都会改变数组本身。数组里的索引和长度是无法被监控的。</li></ol><h3 id="7-3-Vue项目中你是如何解决跨域的呢？？"><a href="#7-3-Vue项目中你是如何解决跨域的呢？？" class="headerlink" title="7.3 Vue项目中你是如何解决跨域的呢？？"></a>7.3 Vue项目中你是如何解决跨域的呢？？</h3><p>解决跨域的方法有很多，下面列举了三种：</p><ol><li><p>JSONP</p></li><li><p>CORS</p></li><li><p>Proxy<br>而在vue项目中，我们主要针对nginx或Proxy这两种方案进行展开</p></li><li><p>在项目中配置<br>如果是通过vue-cli脚手架工具搭建项目，我们可以通过webpack为我们起一个本地服务器作为请求的代理对象，通过该服务器转发请求至目标服务器，得到结果再转发给前端，但是最终发布上线时如果web应用和接口服务器不在一起仍会跨域<br>在vue.config.js文件，新增以下代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>        host<span class="token operator">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        port<span class="token operator">:</span> <span class="token number">8084</span><span class="token punctuation">,</span>        open<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">// vue项目启动时自动打开浏览器</span>        proxy<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string">'/api'</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// '/api'是代理标识，用于告诉node，url前面是/api的就是使用代理的</span>                target<span class="token operator">:</span> <span class="token string">"http://xxx.xxx.xx.xx:8080"</span><span class="token punctuation">,</span> <span class="token comment">//目标地址，一般是指后台服务器地址</span>                changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否跨域</span>                pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// pathRewrite 的作用是把实际Request Url中的'/api'用""代替</span>                    <span class="token string">'^/api'</span><span class="token operator">:</span> <span class="token string">""</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过axios发送请求中，配置请求的根路径</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'/api'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通过配置nginx实现代理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">server <span class="token punctuation">{</span>    listen    <span class="token number">80</span><span class="token punctuation">;</span>    server_name www<span class="token punctuation">.</span>josephxia<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    location <span class="token operator">/</span> <span class="token punctuation">{</span>        root  <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token punctuation">;</span>        index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        try_files $uri $uri<span class="token operator">/</span> <span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    location <span class="token operator">/</span>api <span class="token punctuation">{</span>        proxy_pass  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">3000</span><span class="token punctuation">;</span>        proxy_redirect   off<span class="token punctuation">;</span>        proxy_set_header  Host       $host<span class="token punctuation">;</span>        proxy_set_header  <span class="token constant">X</span><span class="token operator">-</span>Real<span class="token operator">-</span><span class="token constant">IP</span>     $remote_addr<span class="token punctuation">;</span>        proxy_set_header  <span class="token constant">X</span><span class="token operator">-</span>Forwarded<span class="token operator">-</span>For  $proxy_add_x_forwarded_for<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="8-你知道-nextTick-吗？它是干什么的？实现原理是什么？"><a href="#8-你知道-nextTick-吗？它是干什么的？实现原理是什么？" class="headerlink" title="8.你知道 nextTick 吗？它是干什么的？实现原理是什么？"></a>8.你知道 nextTick 吗？它是干什么的？实现原理是什么？</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">dom更新之后执行的回调<span class="token punctuation">,</span> 可以用来获取更新后的dom元素<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-普通函数-箭头函数的区别-构造函数"><a href="#9-普通函数-箭头函数的区别-构造函数" class="headerlink" title="9. 普通函数 箭头函数的区别- 构造函数"></a>9. 普通函数 箭头函数的区别- 构造函数</h2><ol><li>箭头函数没有原型 原型是undefined</li><li>箭头函数this指向全局对象 而函数指向引用对象</li><li>call，apply，bind方法改变不了箭头函数的指向</li></ol><h2 id="9-基本类型-引用类型"><a href="#9-基本类型-引用类型" class="headerlink" title="9. 基本类型 引用类型"></a>9. 基本类型 引用类型</h2><ol><li>JavaScript 中共有 6 种基本数据类型：Undefined、Null、Boolean、Number、String、Symbol (new in ES 6) ！引用类型 object</li></ol><ul><li>typeof：经常用来检测一个变量是不是最基本的数据类型<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment">// undefined</span>a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment">// object</span>a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">typeof</span> a<span class="token punctuation">;</span>    <span class="token comment">// boolean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>instanceof：用来判断某个构造函数的 prototype 属性所指向的对象是否存在于另外一个要检测对象的原型链上<br>简单说就是判断一个引用类型的变量具体是不是某种类型的对象<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// true</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">aa</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span> <span class="token comment">// true</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>记录下特殊情况<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "object" </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="10-vue2-和-vue3-的区别-vue3-快在哪"><a href="#10-vue2-和-vue3-的区别-vue3-快在哪" class="headerlink" title="10. vue2 和 vue3 的区别 (vue3 快在哪)"></a>10. vue2 和 vue3 的区别 (vue3 快在哪)</h2><ol><li>diff算法增加patchFlag静态标识，只对比有静态标识的dom元素</li><li>事件增加缓存</li><li>很多文本节点提升 只定义一次，渲染时不需要再次定义，vue2每次都需要重新定义</li><li>ssr渲染 以字符串方式渲染</li><li>proxy替换了之前的defineProterty</li><li>vite</li><li>ts</li></ol><h2 id="11-vuex-的核心概念"><a href="#11-vuex-的核心概念" class="headerlink" title="11. vuex 的核心概念"></a>11. vuex 的核心概念</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token parameter">state</span> <span class="token operator">=&gt;</span> 基本数据<span class="token parameter">getters</span> <span class="token operator">=&gt;</span> 从基本数据派生的数据<span class="token parameter">mutations</span> <span class="token operator">=&gt;</span> 修改数据，同步<span class="token parameter">actions</span> <span class="token operator">=&gt;</span> <span class="token function">修改数据，异步</span> <span class="token punctuation">(</span>Action 提交的是 mutation，而不是直接变更状态<span class="token punctuation">)</span><span class="token parameter">modules</span> <span class="token operator">=&gt;</span> 模块化Vuex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-1-vuex-中-mutations-与-actions-的使用及区别"><a href="#11-1-vuex-中-mutations-与-actions-的使用及区别" class="headerlink" title="11.1 vuex 中 mutations 与 actions 的使用及区别"></a>11.1 vuex 中 mutations 与 actions 的使用及区别</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>Action 提交的是 mutation，而不是直接变更状态。<span class="token number">2.</span>Action 可以包含任意异步操作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="12-vue-router-有哪几种导航钩子？"><a href="#12-vue-router-有哪几种导航钩子？" class="headerlink" title="12. vue-router 有哪几种导航钩子？"></a>12. vue-router 有哪几种导航钩子？</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">全局导航钩子：router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next<span class="token punctuation">)</span>组件内的钩子：router<span class="token punctuation">.</span><span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next<span class="token punctuation">)</span> router<span class="token punctuation">.</span><span class="token function">beforeRouteUpdate</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next<span class="token punctuation">)</span> router<span class="token punctuation">.</span><span class="token function">beforeRouteLeave</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next<span class="token punctuation">)</span>单独路由独享组件：router<span class="token punctuation">.</span>beforeEnter<span class="token operator">:</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="12-1-路由的两种方式-路由守卫"><a href="#12-1-路由的两种方式-路由守卫" class="headerlink" title="12.1 路由的两种方式 路由守卫"></a>12.1 路由的两种方式 路由守卫</h3><ol><li>hash —— 它的特点在于：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。</li><li>history —— 利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法。（需要特定浏览器支持）这两个方法应用于浏览器的历史记录栈，<br>在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 URL，但浏览器不会立即向后端发送请求。</li></ol><h2 id="13-v-model-是如何实现的，语法糖实际是什么？"><a href="#13-v-model-是如何实现的，语法糖实际是什么？" class="headerlink" title="13. v-model 是如何实现的，语法糖实际是什么？"></a>13. v-model 是如何实现的，语法糖实际是什么？</h2><ol><li>作用在表单元素上 v-model=”message” 等同于 v-bind:value=”message” v-on:input=”message=$event.target.value”</li><li>作用在组件上, 本质是一个父子组件通信的语法糖，通过prop和$.emit实现, 等同于:value=”message” @input=” $emit(‘input’, $event.target.value)”</li></ol><h2 id="14-常见的事件修饰符及其作用？"><a href="#14-常见的事件修饰符及其作用？" class="headerlink" title="14.常见的事件修饰符及其作用？"></a>14.常见的事件修饰符及其作用？</h2><ol><li>.stop：等同于 JavaScript 中的 event.stopPropagation() ，防止事件冒泡；</li><li>.prevent ：等同于 JavaScript 中的 event.preventDefault() ，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；</li><li>.capture ：当元素发生冒泡时，先触发带有该修饰符的元素。若有多个该修饰符，则由外而内触发。如 div1中嵌套div2中嵌套div3.capture中嵌套div4，那么执行顺序为：div3=》div4=》div2=》div1</li><li>.self ：只会触发自己范围内的事件，不包含子元素；</li><li>.once ：只会触发一次。</li></ol><h2 id="15-过滤器-Filter"><a href="#15-过滤器-Filter" class="headerlink" title="15.过滤器 (Filter)"></a>15.过滤器 (Filter)</h2><ol><li>在Vue中使用filters来过滤(格式化)数据，filters不会修改数据，而是过滤(格式化)数据，改变用户看到的输出（计算属性 computed ，方法 methods 都是通过修改数据来处理数据格式的输出显示。</li><li>使用场景： 比如需要处理时间、数字等的的显示格式；</li></ol><h2 id="16-Vue-2-中给-data-中添加一个新的属性？如何解决？"><a href="#16-Vue-2-中给-data-中添加一个新的属性？如何解决？" class="headerlink" title="16.Vue 2 中给 data 中添加一个新的属性？如何解决？"></a>16.Vue 2 中给 data 中添加一个新的属性？如何解决？</h2><blockquote><p>视图并未刷新。这是因为在Vue实例创建时，新属性并未声明，因此就没有被Vue转换为响应式的属性，自然就不会触发视图的更新，这时就需要使用Vue的全局 api $set()： this.$set(this.obj, ‘new_property’, ‘new_value’)</p></blockquote><h2 id="17-说说你自己项目碰到的难点"><a href="#17-说说你自己项目碰到的难点" class="headerlink" title="17. 说说你自己项目碰到的难点"></a>17. 说说你自己项目碰到的难点</h2><blockquote><p>结合自己项目 说几个 可以往自己擅长方向引 比如性能优化 数据埋点 或者工程化实践等等</p></blockquote><h2 id="18-false-和-false"><a href="#18-false-和-false" class="headerlink" title="18. []==false 和 ![]==false"></a>18. []==false 和 ![]==false</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">第一个 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span> 转为数字 <span class="token number">0</span><span class="token operator">==</span><span class="token number">0</span>第二个 <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span> 转为布尔 <span class="token boolean">false</span><span class="token operator">==</span><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="19-vue-和-react-的相同点和不同点-两个问题"><a href="#19-vue-和-react-的相同点和不同点-两个问题" class="headerlink" title="19. vue 和 react 的相同点和不同点 两个问题"></a>19. vue 和 react 的相同点和不同点 两个问题</h2><ol><li>相同：<ul><li>都使用了虚拟dom、</li><li>都有ssr、</li><li>都支持jsx，</li><li>性能好、</li><li>响应式、</li><li>数据驱动、</li><li>将注意力集中保持在核心库，同时也关注路由和负责处理全局状态管理的辅助库。</li></ul></li><li>区别：<ul><li>vue使用于小项目、</li><li>vue学习成本低、</li><li>vue渲染更快、</li><li>vue有模板而react是jsx、</li><li>vue双向数据绑定，</li><li>react是单向、</li><li>vue有指令语法、</li></ul></li></ol><h2 id="20-http-请求的方法有哪些"><a href="#20-http-请求的方法有哪些" class="headerlink" title="20.http 请求的方法有哪些"></a>20.http 请求的方法有哪些</h2><ol><li> get</li><li> post</li><li> head</li><li> put</li><li> delete</li><li> connect</li><li> trace</li><li> options</li></ol><h2 id="21-js闭包的概念"><a href="#21-js闭包的概念" class="headerlink" title="21. js闭包的概念"></a>21. js闭包的概念</h2><blockquote><p>一个函数和该函数所拥有的变量之和的环境，外部获取使用该变量 但是不能被外部直接改变 要使用该函数拥有的方法去调用</p></blockquote><h2 id="22-cookies，sessionStorage-和-localStorage-的区别？"><a href="#22-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="22. cookies，sessionStorage 和 localStorage 的区别？"></a>22. cookies，sessionStorage 和 localStorage 的区别？</h2><ol><li>cookie:</li></ol><ul><li>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。</li><li>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。</li><li>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</li></ul><ol start="2"><li>存储大小：</li></ol><ul><li>cookie数据大小不能超过4k。</li><li>sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li></ul><ol start="3"><li>过期时间：</li></ol><ul><li>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；</li><li>sessionStorage 数据在当前浏览器窗口关闭后自动删除。</li><li>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</li></ul><h2 id="22-和-区别"><a href="#22-和-区别" class="headerlink" title="22. == 和 ===区别"></a>22. == 和 ===区别</h2><p>相等操作符（==）会做类型转换，再进行值的比较，全等运算符（===）不会做类型转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"55"</span> <span class="token operator">===</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，不相等，因为数据类型不同</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">55</span> <span class="token operator">===</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，相等，因为数据类型相同值也相同</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"55"</span> <span class="token operator">==</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，相等，因为（==）会转换数据类型 进行比较</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="23-深拷贝浅拷贝的区别？如何实现一个深拷贝？"><a href="#23-深拷贝浅拷贝的区别？如何实现一个深拷贝？" class="headerlink" title="23. 深拷贝浅拷贝的区别？如何实现一个深拷贝？"></a>23. 深拷贝浅拷贝的区别？如何实现一个深拷贝？</h2><p>浅拷贝，指的是创建新的数据，这个数据有着原始数据属性值的一份精确拷贝<br>在JavaScript中，存在浅拷贝的现象有：</p><ol><li>Object.assign<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    nature<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'smart'</span><span class="token punctuation">,</span> <span class="token string">'good'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    names<span class="token operator">:</span> <span class="token punctuation">{</span>        name1<span class="token operator">:</span> <span class="token string">'fx'</span><span class="token punctuation">,</span>        name2<span class="token operator">:</span> <span class="token string">'xka'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">love</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fx is a great girl'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fxObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Array.prototype.slice(), Array.prototype.concat()<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span><span class="token keyword">const</span> fxArrs <span class="token operator">=</span> fxArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment">// ["One", "Two", "Three"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment">// ["One", "love", "Three"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span><span class="token keyword">const</span> fxArrs <span class="token operator">=</span> fxArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment">// ["One", "Two", "Three"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment">// ["One", "love", "Three"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用拓展运算符实现的复制<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span><span class="token keyword">const</span> fxArrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>fxArr<span class="token punctuation">]</span>fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment">// ["One", "Two", "Three"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment">// ["One", "love", "Three"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>深拷贝开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性<br>常见的深拷贝方式有：</li><li>_.cloneDeep()  tips： 存在于Lodash库里<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span> <span class="token punctuation">{</span> f<span class="token operator">:</span> <span class="token punctuation">{</span> g<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    c<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>jQuery.extend()<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jquery'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token operator">:</span> <span class="token punctuation">{</span> f<span class="token operator">:</span> <span class="token punctuation">{</span> g<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    c<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>JSON.stringify()<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj2<span class="token operator">=</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"55"</span> <span class="token operator">===</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，不相等，因为数据类型不同</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">55</span> <span class="token operator">===</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，相等，因为数据类型相同值也相同</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"55"</span> <span class="token operator">==</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，相等，因为（==）会转换数据类型 进行比较</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="24-说说var、let、const之间的区别"><a href="#24-说说var、let、const之间的区别" class="headerlink" title="24.说说var、let、const之间的区别"></a>24.说说var、let、const之间的区别</h2><ol><li>var声明的变量既是全局变量，也是顶层变量</li><li>let是ES6新增的命令，用来声明变量， 用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效</li><li>const声明一个只读的常量，一旦声明，常量的值就不能改变</li></ol><ul><li>变量提升</li></ul><ol><li>var声明的变量存在变量提升，即变量可以在声明之前调用，值为undefined</li><li>let和const不存在变量提升，即它们所声明的变量一定要在声明后使用，否则报错</li></ol><ul><li>暂时性死区</li></ul><ol><li>var不存在暂时性死区</li><li>let和const存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</li></ol><ul><li>块级作用域</li><li>let和const存在块级作用域</li><li>var不存在块级作用域</li></ul><ol start="3"><li>重复声明</li></ol><ul><li>var允许重复声明变量</li><li>let和const在同一作用域不允许重复声明变量</li></ul><ol start="4"><li>let和const在同一作用域不允许重复声明变量</li></ol><ul><li>var和let可以</li><li>const声明一个只读的常量。一旦声明，常量的值就不能改变</li></ul><h2 id="26-for-in和for-of-的区别和原理？"><a href="#26-for-in和for-of-的区别和原理？" class="headerlink" title="26.for in和for of 的区别和原理？"></a>26.for in和for of 的区别和原理？</h2><p>for in是获取属性名，for of获取属性值。</p><ol><li>for in的特点</li></ol><ul><li>for in 循环返回的值都是数据结构的键名。</li><li>遍历对象返回的是对象的key值，遍历数组返回的是数组的下标。</li><li>还会遍历原型上的值和手动添加的值</li><li>总的来说：for in适合遍历对象。</li></ul><ol start="2"><li>for of的特点</li></ol><ul><li>for of 循环获取一对键值中的键值。</li><li>一个数据结构只要部署了Symbol.iterator属性，就被视为具有iterator接口，可以使用for of。</li><li>for of不同于forEach，for of是可以break，continue，return配合使用，for of 循环可以随时退出循环。</li><li>总的来说：for of遍历所有数据结构的统一接口。</li></ul><h2 id="27-你是怎么理解ES6中-Promise的？"><a href="#27-你是怎么理解ES6中-Promise的？" class="headerlink" title="27.你是怎么理解ES6中 Promise的？"></a>27.你是怎么理解ES6中 Promise的？</h2><p>Promise，译为承诺，是异步编程的一种解决方案，比传统的解决方案（回调函数）更加合理和更加强大</p><ol><li>promise对象仅有三种状态</li></ol><ul><li>pending（进行中）</li><li>fulfilled（已成功）</li><li>rejected（已失败）</li></ul><ol start="2"><li>Promise对象是一个构造函数，用来生成Promise实例<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ul><li>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject</li><li>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”</li><li>reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”</li></ul><ol start="3"><li>Promise构建出来的实例存在以下方法：</li></ol><ul><li>then()<br>then是实例状态发生改变时的回调函数，第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数<br>then方法返回的是一个新的Promise实例，也就是promise能链式书写的原因<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"/posts.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">json</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> json<span class="token punctuation">.</span>post<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>catch()<br>catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'/posts.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">posts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 处理 getJSON 和 前一个回调函数运行时发生的错误</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发生错误！'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'/post/1.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">getJSON</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span>commentURL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">comments</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// some code</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 处理前面三个Promise产生的错误</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>finally()<br>finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>···<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>···<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>···<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li>Promise构造函数存在以下方法：</li></ol><ul><li>all()<br>Promise.all()方法用于将多个 Promise实例，包装成一个新的 Promise实例，全部成功才算成功，要么一个失败直接失败<br>通过all汇总所有请求结果，只需设置一个loading即可<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>race()<br>Promise.race()第一个为成功它就成功，第一个失败它就跟着失败<br>通过race可以设置图片请求超时</li></ul><h2 id="28-数组的常用方法有哪些？"><a href="#28-数组的常用方法有哪些？" class="headerlink" title="28.数组的常用方法有哪些？"></a>28.数组的常用方法有哪些？</h2><ol><li>push()</li></ol><ul><li>接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个数组</span><span class="token keyword">let</span> count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 推入两项</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>unshift()</li></ol><ul><li>在数组开头添加任意多个值，然后返回新的数组长度<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个数组</span><span class="token keyword">let</span> count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从数组开头推入两项</span><span class="token function">alert</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="3"><li>splice()</li></ol><ul><li>传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回空数组 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> removed <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span> <span class="token comment">// red,yellow,orange,green,blue</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span> <span class="token comment">// []</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li>concat()</li></ol><ul><li>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> colors2 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"black"</span><span class="token punctuation">,</span> <span class="token string">"brown"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red", "green","blue"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["red", "green", "blue", "yellow", "black", "brown"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="5"><li>pop()</li></ol><ul><li>用于删除数组的最后一项，同时减少数组的length 值，返回被删除的项<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token keyword">let</span> item <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取得最后一项</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">// green</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="6"><li>shift()</li></ol><ul><li>用于删除数组的第一项，同时减少数组的length 值，返回被删除的项<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token keyword">let</span> item <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取得第一项</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">// red</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="7"><li>splice()</li></ol><ul><li>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> removed <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除第一项</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green,blue</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red，只有一个元素的数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="8"><li>slice()</li></ol><ul><li>用于创建一个包含原有数组中一个或多个元素的新数组，不会影响原始数组<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token punctuation">,</span> <span class="token string">"purple"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> colors2 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> colors3 <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span>   <span class="token comment">// red,green,blue,yellow,purple</span>concole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green,blue,yellow,purple</span>concole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green,blue,yellow</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="9"><li>splice()</li></ol><ul><li>传入三个参数，分别是开始位置，要删除元素的数量，要插入的任意多个元素，返回删除元素的数组，对原数组产生影响<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> removed <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入两个值，删除一个元素</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red,red,purple,blue</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// green，只有一个元素的数组</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  10. indexOf()  - 返回要查找的元素在数组中的位置，如果没找到则返回 -1   </span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>javascript    <span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    numbers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="11"><li>includes()  </li></ol><ul><li>返回要查找的元素在数组中的位置，找到返回true，否则false<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><ol start="12"><li>find() </li></ol><ul><li>返回第一个匹配的元素<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">"Matt"</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">27</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>        age<span class="token operator">:</span> <span class="token number">29</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>people<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> element<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token comment">// // {name: "Matt", age: 27}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="13"><li>join() </li></ol><ul><li>接收一个参数，即字符串分隔符，返回包含所有项的字符串<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red,green,blue</span><span class="token function">alert</span><span class="token punctuation">(</span>colors<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"||"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// red||green||blue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="14"><li>some() </li></ol><ul><li>对数组每一项都运行传入的函数，如果有一项函数返回 true ，则这个方法返回 true<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> someResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someResult<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="15"><li>every() </li></ol><ul><li>对数组每一项都运行传入的函数，如果对每一项函数都返回 true ，则这个方法返回 true<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> everyResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>everyResult<span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="16"><li>forEach() </li></ol><ul><li>对数组每一项都运行传入的函数，没有返回值<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>numbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 执行某些操作</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="17"><li>filter() </li></ol><ul><li>对数组每一项都运行传入的函数，函数返回 true 的项会组成数组之后返回<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> filterResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>filterResult<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3,4,5,4,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ol start="18"><li>map() </li></ol><ul><li>对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> mapResult <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapResult<span class="token punctuation">)</span> <span class="token comment">// 2,4,6,8,10,8,6,4,2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://s4.ax1x.com/2022/01/23/74dbAf.jpg" alt="要加油啊"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端,vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react</title>
      <link href="/xiatian.github.io/2021/10/07/react/"/>
      <url>/xiatian.github.io/2021/10/07/react/</url>
      
        <content type="html"><![CDATA[<h2 id="1-涉及到场景主要是-react-用到-echarts-数据更新"><a href="#1-涉及到场景主要是-react-用到-echarts-数据更新" class="headerlink" title="1.涉及到场景主要是 react 用到 echarts 数据更新"></a>1.涉及到场景主要是 react 用到 echarts 数据更新</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> propFlag<span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token parameter">item<span class="token operator">:</span> any<span class="token punctuation">,</span> index<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">===</span> props<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>propFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initCharts</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-全局销毁器"><a href="#2-全局销毁器" class="headerlink" title="2.全局销毁器"></a>2.全局销毁器</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">componentWillUnmount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-记一个操作符-可选链"><a href="#3-记一个操作符-可选链" class="headerlink" title="3.记一个操作符 ?? 可选链(?)"></a>3.记一个操作符 ?? 可选链(?)</h2><h3 id="3-1举个栗子"><a href="#3-1举个栗子" class="headerlink" title="3.1举个栗子 ??"></a>3.1举个栗子 ??</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&gt;</span> <span class="token keyword">undefined</span> <span class="token operator">??</span> <span class="token string">'default'</span><span class="token string">'default'</span><span class="token operator">&gt;</span> <span class="token keyword">null</span> <span class="token operator">??</span> <span class="token string">'default'</span><span class="token string">'default'</span><span class="token operator">&gt;</span> <span class="token boolean">false</span> <span class="token operator">??</span> <span class="token string">'default'</span><span class="token boolean">false</span><span class="token operator">&gt;</span> <span class="token string">''</span> <span class="token operator">??</span> <span class="token string">'default'</span><span class="token string">''</span><span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">??</span> <span class="token string">'default'</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>so ~ : ?? 的意思是，如果 ?? 左边的值是 null 或者 undefined，那么就返回右边的值。</p><h3 id="3-1举个栗子-可选链"><a href="#3-1举个栗子-可选链" class="headerlink" title="3.1举个栗子 可选链(?)"></a>3.1举个栗子 可选链(?)</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Todo</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">?.</span>b<span class="token operator">?.</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Todo</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端,react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题记录</title>
      <link href="/xiatian.github.io/2021/09/07/jiang-yi-jiang-wo-yu-dao-de-mian-shi-ti/"/>
      <url>/xiatian.github.io/2021/09/07/jiang-yi-jiang-wo-yu-dao-de-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面试随记。</p></blockquote><h2 id="1-vue，react相关"><a href="#1-vue，react相关" class="headerlink" title="1.vue，react相关"></a>1.vue，react相关</h2><h3 id="1-1-vuex存储什么？vuex中的方法有哪些？"><a href="#1-1-vuex存储什么？vuex中的方法有哪些？" class="headerlink" title="1.1 vuex存储什么？vuex中的方法有哪些？"></a>1.1 vuex存储什么？vuex中的方法有哪些？</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vuex是状态存储store下有    state：状态存储   getter：调用方法查询，可进行过滤   mutation：提交修改，改变state唯一方式   action：异步操作，执行完后需要 commit mutation 修改状态   module：分解成多个子模块，每个都是一个store，有自己的state、getter、action、mutation和module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-原型链，有什么特点？"><a href="#1-2-原型链，有什么特点？" class="headerlink" title="1.2 原型链，有什么特点？"></a>1.2 原型链，有什么特点？</h3><pre class="line-numbers language-none"><code class="language-none">当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是Object.prototype null <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-什么是-React-Hooks？"><a href="#1-3-什么是-React-Hooks？" class="headerlink" title="1.3 什么是 React Hooks？"></a>1.3 什么是 React Hooks？</h3><pre class="line-numbers language-none"><code class="language-none">Hooks是 React 16.8 中的新添加内容。它们允许在不编写类的情况下使用state和其他 React 特性。使用 Hooks，可以从组件中提取有状态逻辑，这样就可以独立地测试和重用它。Hooks 允许咱们在不改变组件层次结构的情况下重用有状态逻辑，这样在许多组件之间或与社区共享 Hooks 变得很容易。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-使用-React-Hooks-好处是啥？"><a href="#1-4-使用-React-Hooks-好处是啥？" class="headerlink" title="1.4 使用 React Hooks 好处是啥？"></a>1.4 使用 React Hooks 好处是啥？</h3><pre class="line-numbers language-none"><code class="language-none">首先，Hooks 通常支持提取和重用跨多个组件通用的有状态逻辑，而无需承担高阶组件或渲染 props 的负担。Hooks 可以轻松地操作函数组件的状态，而不需要将它们转换为类组件。Hooks 在类中不起作用，通过使用它们，咱们可以完全避免使用生命周期方法，例如 componentDidMount、componentDidUpdate、componentWillUnmount。相反，使用像useEffect这样的内置钩子。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-5-Vue-中-computed-和-watch-有什么区别"><a href="#1-5-Vue-中-computed-和-watch-有什么区别" class="headerlink" title="1.5 Vue 中 computed 和 watch 有什么区别"></a>1.5 Vue 中 computed 和 watch 有什么区别</h3><pre class="line-numbers language-none"><code class="language-none">1.计算属性 computed：（1）支持缓存，只有依赖数据发生变化时，才会重新进行计算函数；（2）计算属性内不支持异步操作；（3）计算属性的函数中都有一个 get(默认具有，获取计算属性)和 set(手动添加，设置计算属性)方法；（4）计算属性是自动监听依赖值的变化，从而动态返回内容。2.watch:(1) 不支持缓存，只要数据发生变化，就会执行侦听函数；(2) 侦听属性内支持异步操作；(3) 侦听属性的值可以是一个对象，接收 handler 回调，deep，immediate 三个属性；(3) 监听是一个过程，在监听的值变化时，可以触发一个回调，并做一些其他事情。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-vue3-Proxy-里面的一些方法"><a href="#1-6-vue3-Proxy-里面的一些方法" class="headerlink" title="1.6 vue3 Proxy  里面的一些方法"></a>1.6 vue3 Proxy  里面的一些方法</h3><p><img src="https://z3.ax1x.com/2021/09/07/hozZaF.png" alt="proxy里面的一些方法"></p><h2 id="2-js-css相关"><a href="#2-js-css相关" class="headerlink" title="2.js css相关"></a>2.js css相关</h2><h3 id="2-1-类数组转数组"><a href="#2-1-类数组转数组" class="headerlink" title="2.1 类数组转数组"></a>2.1 类数组转数组</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">2</span>、Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">3</span>、扩展运算符（…） <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-说说你对闭包的理解"><a href="#2-2-说说你对闭包的理解" class="headerlink" title="2.2 说说你对闭包的理解"></a>2.2 说说你对闭包的理解</h3><pre class="line-numbers language-none"><code class="language-none">使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染；缺点是闭包会常驻内存，增加内存使用量，使用不当很容易造成内存泄漏。在JavaScript中，函数即闭包，只有函数才会产生作用域。闭包有3个特性：（1）函数嵌套函数。（2）在函数内部可以引用外部的参数和变量。（3）参数和变量不会以垃圾回收机制回收。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-谈一谈你对this的理解，以及在各种环境下的this在浏览器里"><a href="#2-3-谈一谈你对this的理解，以及在各种环境下的this在浏览器里" class="headerlink" title="2.3 谈一谈你对this的理解，以及在各种环境下的this在浏览器里"></a>2.3 谈一谈你对this的理解，以及在各种环境下的this在浏览器里</h3><pre class="line-numbers language-none"><code class="language-none">在全局范围内this指向window对象在函数中，this永远指向最后调用他的那个对象(箭头函数除外)。在构造函数中，this指向new出来的新对象。call、apply、bind中的this被强绑定在指定的那个对象上。箭头函数this为父作用域的this，不是调用时的this。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-从输入-URL-到页面展示到底发生了什么？"><a href="#2-4-从输入-URL-到页面展示到底发生了什么？" class="headerlink" title="2.4 从输入 URL 到页面展示到底发生了什么？"></a>2.4 从输入 URL 到页面展示到底发生了什么？</h3><pre class="line-numbers language-none"><code class="language-none">1、输入地址2、浏览器查找域名的 IP 地址3、浏览器向 web 服务器发送一个 HTTP 请求4、服务器的永久重定向响应6、服务器处理请求7、服务器返回一个 HTTP 响应8、浏览器显示 HTML9、浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-页面渲染html的过程"><a href="#2-5-页面渲染html的过程" class="headerlink" title="2.5 页面渲染html的过程"></a>2.5 页面渲染html的过程</h3><pre class="line-numbers language-none"><code class="language-none">1.解析HTML文件，创建DOM树（自上而下）2.解析CSS,形成CSS对象模型3.将CSS与DOM合并，构建渲染树4、布局与绘制，重绘与重排<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-重绘与重排"><a href="#2-6-重绘与重排" class="headerlink" title="2.6 重绘与重排"></a>2.6 重绘与重排</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。常见的引起重绘的属性：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="left">属性：</th><th align="center">–</th><th align="right">–</th><th align="right">–</th></tr></thead><tbody><tr><td align="left">color</td><td align="center">border-style</td><td align="right">visibility</td><td align="right">background</td></tr><tr><td align="left">text-decoration</td><td align="center">background-image</td><td align="right">background-position</td><td align="right">background-repeat</td></tr><tr><td align="left">outline-color</td><td align="center">outline</td><td align="right">outline-style</td><td align="right">border-radius</td></tr><tr><td align="left">outline-width</td><td align="center">box-shadow</td><td align="right">background-size</td><td align="right"></td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">重排也叫回流，简单的说就是重新生成布局，重新排列元素。下面情况会发生重排：    1.页面初始渲染，这是开销最大的一次重排    2.添加/删除可见的DOM元素    3.改变元素位置    4.改变元素尺寸，比如边距、填充、边框、宽度和高度等    5.改变元素内容，比如文字数量，图片大小等    6.改变元素字体大小    7.改变浏览器窗口尺寸，比如resize事件发生时    8.激活CSS伪类（例如：:hover）    9.设置 style 属性的值，因为通过设置style属性改变结点样式的话，每一次设置都会触发一次reflow    10.查询某些属性或调用某些计算方法：offsetWidth、offsetHeight等，除此之外，当我们调用 getComputedStyle方法，或者IE里的 currentStyle 时，也会触发重排，原理是一样的，都为求一个“即时性”和“准确性”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-call和apply的区别"><a href="#2-7-call和apply的区别" class="headerlink" title="2.7 call和apply的区别"></a>2.7 call和apply的区别</h3><pre class="line-numbers language-none"><code class="language-none">call apply的作用都是改变this指向call：call() 方法和apply() 方法作用相同, 区别在于接收参数的方式不同, call() 需要列举所有传入的所有参数。apply：apply()方法需要将实参封装到一个数组中统一传递（即使只有实参只有一个，也要放到数组中）。严格来说只接收argument对象和数组两种形式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-8-new操作符具体干了什么呢"><a href="#2-8-new操作符具体干了什么呢" class="headerlink" title="2.8 new操作符具体干了什么呢?"></a>2.8 new操作符具体干了什么呢?</h3><pre class="line-numbers language-none"><code class="language-none">1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。2、属性和方法被加入到 this 引用的对象中。3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-9-单向数据流和双向数据流"><a href="#2-9-单向数据流和双向数据流" class="headerlink" title="2.9 单向数据流和双向数据流"></a>2.9 单向数据流和双向数据流</h3><pre class="line-numbers language-none"><code class="language-none">单向数据流：所有状态的改变可记录、可跟踪，源头易追溯；所有数据只有一份，组件数据只有唯一的入口和出口，使得程序更直观更容易理解，有利于应用的可维护性；一旦数据变化，就去更新页面(data-页面)，但是没有(页面-data)；如果用户在页面上做了变动，那么就手动收集起来(双向是自动)，合并到原有的数据中双向数据流：无论数据改变，或是用户操作，都能带来互相的变动，自动更新。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-10-slice（）与splice（）的用法和区别"><a href="#2-10-slice（）与splice（）的用法和区别" class="headerlink" title="2.10 slice（）与splice（）的用法和区别"></a>2.10 slice（）与splice（）的用法和区别</h3><pre class="line-numbers language-mardown" data-language="mardown"><code class="language-mardown">1.slice(start，end)- 从start开始截取到end但是不包括end- 返回值为截取出来的元素的集合- 原始的数组不会发生变化2. splice(start,deleteCount,item1,item2…..);- start参数 开始的位置- deleteCount 要截取的个数- 后面的items为要添加的元素- 如果deleteCount为0，则表示不删除元素，从start位置开始添加后面的几个元素到原始的数组里面- 返回值为由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组- 这个方法会改变原始数组，数组的长度会发生变化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-11-Event-Loop"><a href="#2-11-Event-Loop" class="headerlink" title="2.11  Event Loop"></a>2.11  Event Loop</h3><pre class="line-numbers language-none"><code class="language-none">1.浏览器的事件循环（event loop）中分成宏任务和微任务。JS 中任务分成同步任务和异步任务。2.JS 中主栈执行的大多数的任务，例如：定时器，事件绑定，ajax，回调函数，node中fs操作模块等就是宏任务3.promise, async/await, process.nextTick等就是微任务。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端,面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信公众号排版工具</title>
      <link href="/xiatian.github.io/2021/08/28/article-title/"/>
      <url>/xiatian.github.io/2021/08/28/article-title/</url>
      
        <content type="html"><![CDATA[<blockquote><p>微信公众号排版工具。问题或建议，请公众号留言。**<a href="#jump_8">程序员翻身</a>**</p></blockquote><p>写文章、发布文章<br>首先在博客根目录下右键打开git bash，安装一个扩展npm i hexo-deployer-git。</p><p>然后输入hexo new post “article title”，新建一篇文章。</p><p>然后打开D:\study\program\blog\source_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><h2 id="1-Markdown-com-cn-简介"><a href="#1-Markdown-com-cn-简介" class="headerlink" title="1 Markdown.com.cn 简介"></a>1 Markdown.com.cn 简介</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">cnpm init <span class="token operator">--</span>yescnpm i webpack<span class="token operator">-</span>cli <span class="token operator">--</span>save<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">cnpm i webpack<span class="token operator">-</span>cli <span class="token operator">--</span>save<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">cnpm install css<span class="token operator">-</span>loader <span class="token operator">--</span>save<span class="token operator">-</span>devcnpm install style<span class="token operator">-</span>loader <span class="token operator">--</span>save<span class="token operator">-</span>devcnpm install url<span class="token operator">-</span>loader <span class="token operator">--</span>save<span class="token operator">-</span>devcnpm install html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">--</span>save<span class="token operator">-</span>devcnpm install copy<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">--</span>save<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>支持微信公众号、知乎和稀土掘金</li><li>点击右上方对应图标，一键复制到各平台</li></ul><h2 id="2-Markdown语法教程"><a href="#2-Markdown语法教程" class="headerlink" title="2 Markdown语法教程"></a>2 Markdown语法教程</h2><h3 id="2-1-标题站"><a href="#2-1-标题站" class="headerlink" title="2.1 标题站"></a>2.1 标题站</h3><p>不同数量的<code>#</code>可以完成不同的标题，如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="2-2-字体"><a href="#2-2-字体" class="headerlink" title="2.2 字体"></a>2.2 字体</h3><p>粗体、斜体、粗体和斜体，删除线，需要在文字前后加不同的标记符号。如下：</p><p><strong>这个是粗体</strong></p><p><em>这个是斜体</em></p><p><em><strong>这个是粗体加斜体</strong></em></p><p>~这里想用删除线~~</p><p>注：如果想给字体换颜色、字体或者居中显示，需要使用内嵌HTML来实现。</p><h3 id="2-3-无序列表"><a href="#2-3-无序列表" class="headerlink" title="2.3 无序列表"></a>2.3 无序列表</h3><p>无序列表的使用，在符号<code>-</code>后加空格使用。如下：</p><ul><li>无序列表 1</li><li>无序列表 2</li><li>无序列表 3</li></ul><p>如果要控制列表的层级，则需要在符号<code>-</code>前使用空格。如下：</p><ul><li>无序列表 1</li><li>无序列表 2<ul><li>无序列表 2.1</li><li>无序列表 2.2</li></ul></li></ul><p><strong>由于微信原因，最多支持到二级列表</strong>。</p><h3 id="2-4-有序列表"><a href="#2-4-有序列表" class="headerlink" title="2.4 有序列表"></a>2.4 有序列表</h3><p>有序列表的使用，在数字及符号<code>.</code>后加空格后输入内容，如下：</p><ol><li>有序列表 1</li><li>有序列表 2</li><li>有序列表 3</li></ol><h3 id="2-5-引用"><a href="#2-5-引用" class="headerlink" title="2.5 引用"></a>2.5 引用</h3><p>引用的格式是在符号<code>&gt;</code>后面书写文字。如下：</p><blockquote><p>读一本好书，就是在和高尚的人谈话。 ——歌德</p></blockquote><blockquote><p>雇用制度对工人不利，但工人根本无力摆脱这个制度。 ——阮一峰</p></blockquote><h3 id="2-7-链接"><a href="#2-7-链接" class="headerlink" title="2.7 链接"></a>2.7 链接</h3><p>微信公众号仅支持公众号文章链接，即域名为<code>https://mp.weixin.qq.com/</code>的合法链接。使用方法如下所示：</p><p>对于该论述，欢迎读者查阅之前发过的文章，<a href="https://mp.weixin.qq.com/s/s5IhxV2ooX3JN_X416nidA">你是《未来世界的幸存者》么？</a><br><a id="jump_8"></a></p><h3 id="2-8-图片"><a href="#2-8-图片" class="headerlink" title="2.8 图片"></a>2.8 图片</h3><p>插入图片，格式如下：</p><p><img src="https://www.nginx.cn/wp-content/uploads/2020/03/qrcode_for_gh_82cf87d482f0_258.jpg" alt="这里写图片描述"></p><p>支持 jpg、png、gif、svg 等图片格式，<strong>其中 svg 文件仅可在微信公众平台中使用</strong>，svg 文件示例如下：</p><p><img src="https://my-wechat.mdnice.com/mdnice/i_am_svg_20191024083453.svg"></p><p>支持图片<strong>拖拽和截图粘贴</strong>到编辑器中。</p><p>注：支持图片 <em><strong>拖拽和截图粘贴</strong></em> 到编辑器中，仅支持 https 的图片，图片粘贴到微信时会自动上传微信服务器。</p><h3 id="2-9-分割线"><a href="#2-9-分割线" class="headerlink" title="2.9 分割线"></a>2.9 分割线</h3><p>可以在一行中用三个以上的减号来建立一个分隔线，同时需要在分隔线的上面空一行。如下：</p><hr><h3 id="2-10-表格"><a href="#2-10-表格" class="headerlink" title="2.10 表格"></a>2.10 表格</h3><p>可以使用冒号来定义表格的对齐方式，如下：</p><table><thead><tr><th align="left">姓名</th><th align="center">年龄</th><th align="right">工作</th></tr></thead><tbody><tr><td align="left">小可爱</td><td align="center">18</td><td align="right">吃可爱多</td></tr><tr><td align="left">小小勇敢</td><td align="center">20</td><td align="right">爬棵勇敢树</td></tr><tr><td align="left">小小小机智</td><td align="center">22</td><td align="right">看一本机智书</td></tr></tbody></table><h2 id="3-特殊语法"><a href="#3-特殊语法" class="headerlink" title="3. 特殊语法"></a>3. 特殊语法</h2><h3 id="3-1-脚注"><a href="#3-1-脚注" class="headerlink" title="3.1 脚注"></a>3.1 脚注</h3><blockquote><p>支持平台：微信公众号、知乎。</p></blockquote><p>脚注与链接的区别如下所示：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">链接：<span class="token url">[<span class="token content">文字</span>](<span class="token url">链接</span>)</span>脚注：<span class="token url">[<span class="token content">文字</span>](<span class="token url">脚注解释</span> <span class="token string">"脚注名字"</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有人认为在<a href="https://en.wikipedia.org/wiki/Front-end_web_development" title="Front-end web development">大前端时代</a>的背景下，移动端开发（Android、IOS）将逐步退出历史舞台。</p><p><a href="%E6%98%AF%E6%8C%87%E6%8E%8C%E6%8F%A1%E5%A4%9A%E7%A7%8D%E6%8A%80%E8%83%BD%EF%BC%8C%E5%B9%B6%E8%83%BD%E5%88%A9%E7%94%A8%E5%A4%9A%E7%A7%8D%E6%8A%80%E8%83%BD%E7%8B%AC%E7%AB%8B%E5%AE%8C%E6%88%90%E4%BA%A7%E5%93%81%E7%9A%84%E4%BA%BA%E3%80%82" title="什么是全栈工程师">全栈工程师</a>在业务开发流程中起到了至关重要的作用。</p><p>脚注内容请拉到最下面观看。</p><h3 id="3-2-代码块"><a href="#3-2-代码块" class="headerlink" title="3.2 代码块"></a>3.2 代码块</h3><blockquote><p>支持平台：微信代码主题仅支持微信公众号！其他主题无限制。</p></blockquote><p>如果在一个行内需要引用代码，只要用反引号引起来就好，如下：</p><p>Use the <code>printf()</code> function.</p><p>在需要高亮的代码块的前一行及后一行使用三个反引号，同时<strong>第一行反引号后面表示代码块所使用的语言</strong>，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// FileName: HelloWorld.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>  <span class="token comment">// Java 入口程序，程序从此入口</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向控制台打印一条语句</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>支持以下语言种类：</p><pre class="line-numbers language-none"><code class="language-none">bashclojure，cpp，cs，cssdart，dockerfile, differlanggo，gradle，groovyhaskelljava，javascript，json，juliakotlinlisp，luamakefile，markdown，matlabobjectivecperl，php，pythonr，ruby，rustscala，shell，sql，swifttex，typescriptverilog，vhdlxmlyaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要更换代码高亮样式，可在上方<strong>代码主题</strong>中挑选。</p><p>其中<strong>微信代码主题与微信官方一致</strong>，有以下注意事项：</p><ul><li>带行号且不换行，代码大小与官方一致</li><li>需要在代码块处标志语言，否则无法高亮</li><li>粘贴到公众号后，用鼠标点代码块内外一次，完成高亮</li></ul><p>diff 不能同时和其他语言的高亮同时显示，且需要调整代码主题为微信代码主题以外的代码主题才能看到 diff 效果，使用效果如下:</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> 新增项</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> 删除项</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>其他主题不带行号，可自定义是否换行，代码大小与当前编辑器一致</strong></p><h3 id="3-3-数学公式"><a href="#3-3-数学公式" class="headerlink" title="3.3 数学公式"></a>3.3 数学公式</h3><blockquote><p>支持平台：微信公众号、知乎。</p></blockquote><p>行内公式使用方法，比如这个化学公式：$\ce{Hg^2+ -&gt;[I-] HgI2 -&gt;[I-] [Hg^{II}I4]^2-}$</p><p>块公式使用方法如下：</p><p>$$H(D_2) = -\left(\frac{2}{4}\log_2 \frac{2}{4} + \frac{2}{4}\log_2 \frac{2}{4}\right) = 1$$</p><p>矩阵：</p><p>$$<br>  \begin{pmatrix}<br>  1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \<br>  1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \<br>  \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>  1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n \<br>  \end{pmatrix}<br>$$</p><p>公式由于微信不支持，目前的解决方案是转成 svg 放到微信中，无需调整，矢量不失真。</p><p>目前测试如果公式量过大，在 Chrome 下会存在粘贴后无响应，但是在 Firefox 中始终能够成功。</p><h3 id="3-4-TOC"><a href="#3-4-TOC" class="headerlink" title="3.4 TOC"></a>3.4 TOC</h3><blockquote><p>支持平台：微信公众号、知乎。</p></blockquote><p>TOC 全称为 Table of Content，列出全部标题。</p><p>[TOC]</p><p>由于微信只支持到二级列表，本工具仅支持二级标题和三级标题的显示。</p><h3 id="3-5-注音符号"><a href="#3-5-注音符号" class="headerlink" title="3.5 注音符号"></a>3.5 注音符号</h3><blockquote><p>支持平台：微信公众号。</p></blockquote><p>支持注音符号，用法如下：</p><p>Markdown Nice 这么好用，简直是{喜大普奔|hē hē hē hē}呀！</p><h3 id="3-6-横屏滑动幻灯片"><a href="#3-6-横屏滑动幻灯片" class="headerlink" title="3.6 横屏滑动幻灯片"></a>3.6 横屏滑动幻灯片</h3><blockquote><p>支持平台：微信公众号。</p></blockquote><p>通过<code>&lt;![](url),![](url)&gt;</code>这种语法设置横屏滑动滑动片，具体用法如下：</p><p><img src="https://z3.ax1x.com/2021/08/29/hGBbHH.png" alt="avatar"></p><h2 id="4-其他语法"><a href="#4-其他语法" class="headerlink" title="4 其他语法"></a>4 其他语法</h2><h3 id="4-1-HTML"><a href="#4-1-HTML" class="headerlink" title="4.1 HTML"></a>4.1 HTML</h3><p>支持原生 HTML 语法，请写内联样式，如下：</p><p><span style="display:block;text-align:right;color:orangered;">橙色居右</span><br><span style="display:block;text-align:center;color:orangered;">橙色居中</span></p><h3 id="4-2-UML"><a href="#4-2-UML" class="headerlink" title="4.2 UML"></a>4.2 UML</h3><p>不支持，推荐使用开源工具<code>https://draw.io/</code>制作后再导入图片</p><h2 id="5-致谢"><a href="#5-致谢" class="headerlink" title="5 致谢"></a>5 致谢</h2><ul><li>编程如画 <a href="https://github.com/mdnice/markdown-nice" title="插件原作者">markdown-nice-docs</a></li><li>歌词经理 <a href="https://github.com/lyricat/wechat-format" title="灵感来源">wechat-fromat</a></li><li>颜家大少 <a href="http://md.aclickall.com/" title="MdA2All">MD2All</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 更新说明,夏天 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
